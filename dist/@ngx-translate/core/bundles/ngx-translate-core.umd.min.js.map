{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@ngx-translate/core/lib/translate.loader.ts","ng://@ngx-translate/core/lib/missing-translation-handler.ts","ng://@ngx-translate/core/lib/util.ts","ng://@ngx-translate/core/lib/translate.parser.ts","ng://@ngx-translate/core/lib/translate.compiler.ts","ng://@ngx-translate/core/lib/translate.store.ts","ng://@ngx-translate/core/lib/translate.service.ts","ng://@ngx-translate/core/lib/translate.directive.ts","ng://@ngx-translate/core/lib/translate.pipe.ts","ng://@ngx-translate/core/public_api.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","TranslateFakeLoader","_super","getTranslation","lang","of","Injectable","TranslateLoader","FakeMissingTranslationHandler","handle","params","key","equals","o1","o2","keySet","t1","isArray","isDefined","isObject","item","TranslateDefaultParser","_this","templateMatcher","interpolate","expr","interpolateString","interpolateFunction","getValue","target","keys","split","shift","undefined","fn","replace","substring","r","TranslateParser","TranslateFakeCompiler","compile","compileTranslations","translations","TranslateCompiler","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","EventEmitter","onLangChange","onDefaultLangChange","USE_STORE","InjectionToken","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","extend","defaultLanguage","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","setDefaultLang","defineProperty","_defaultLang","_currentLang","retrieveTranslations","pipe","take","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","shareReplay","map","updateLangs","error","err","setTranslation","shouldMerge","mergeDeep","source","output","forEach","_a","_b","emit","getLangs","addLangs","indexOf","push","getParsedResult","interpolateParams","console","log","result_1","observables","key_1","key_1_1","k","isObservable","sources","forkJoin","arr","obj","index","translateService","get","Error","concatMap","getStreamOnTranslationChange","concat","defer","switchMap","event","stream","instant","obj_1","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","MissingTranslationHandler","Inject","args","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","Directive","selector","ElementRef","ChangeDetectorRef","Input","TranslatePipe","translate","transform","query","_i","validArgs","JSON","parse","e","SyntaxError","_dispose","Pipe","name","pure","TranslateModule","forRoot","config","ngModule","providers","loader","provide","useClass","useValue","forChild","NgModule","declarations","exports"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAuEzB,SAASI,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWV,EAAI,EAChE,OAAIQ,EAAUA,EAAEJ,KAAKG,GACd,CACHI,KAAM,WAEF,OADIJ,GAAKP,GAAKO,EAAEJ,SAAQI,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAEP,KAAMa,MAAON,WC/GhD,+BAOA,SAAAO,mDAKA,OAJyCxB,EAAAwB,EAAAC,GACvCD,EAAApB,UAAAsB,eAAA,SAAeC,GACb,OAAOC,EAAAA,GAAG,yBAHbC,EAAAA,aAKDL,GAJyCM,GCSzC,MAAA,aAgBA,IAAAC,EAAA,WAAA,SAAAA,KAKA,OAHEA,EAAA3B,UAAA4B,OAAA,SAAOC,GACL,OAAOA,EAAOC,yBAHjBL,EAAAA,aAKDE,EALA,GCtBA,SAAgBI,EAAOC,EAASC,GAC9B,GAAID,IAAOC,EAAI,OAAO,EACtB,GAAW,OAAPD,GAAsB,OAAPC,EAAa,OAAO,EACvC,GAAID,GAAOA,GAAMC,GAAOA,EAAI,OAAO,MACCxB,EAAgBqB,EAAUI,EAA1DC,SAAYH,EAChB,GAAIG,UAD4BF,GACV,UAANE,EAAgB,CAC9B,IAAI1C,MAAM2C,QAAQJ,GAQX,CACL,GAAIvC,MAAM2C,QAAQH,GAChB,OAAO,EAGT,IAAKH,KADLI,EAAS5C,OAAOW,OAAO,MACX+B,EAAI,CACd,IAAKD,EAAOC,EAAGF,GAAMG,EAAGH,IACtB,OAAO,EAETI,EAAOJ,IAAO,EAEhB,IAAKA,KAAOG,EACV,KAAMH,KAAOI,SAA8B,IAAZD,EAAGH,GAChC,OAAO,EAGX,OAAO,EAvBP,IAAKrC,MAAM2C,QAAQH,GAAK,OAAO,EAC/B,IAAKxB,EAASuB,EAAGvB,SAAWwB,EAAGxB,OAAQ,CACrC,IAAKqB,EAAM,EAAGA,EAAMrB,EAAQqB,IAC1B,IAAKC,EAAOC,EAAGF,GAAMG,EAAGH,IAAO,OAAO,EAExC,OAAO,GAqBb,OAAO,EAIT,SAAgBO,EAAUnB,GACxB,OAAO,MAAOA,EAGhB,SAAgBoB,EAASC,GACvB,OAAQA,GAAwB,iBAATA,IAAsB9C,MAAM2C,QAAQG,GCrD7D,MAAA,aAkBA,IAAAC,EAAA,SAAAnB,GAAA,SAAAmB,IAAA,IAAAC,EAAA,OAAApB,GAAAA,EAAAV,MAAAb,KAAAU,YAAAV,YAEE2C,EAAAC,gBAA0B,0BAiD5B,OAlD4C9C,EAAA4C,EAAAnB,GAGnCmB,EAAAxC,UAAA2C,YAAP,SAAmBC,EAAyBf,GAY1C,MAToB,iBAATe,EACA9C,KAAK+C,kBAAkBD,EAAMf,GACb,mBAATe,EACP9C,KAAKgD,oBAAoBF,EAAMf,GAGlC,GAMVW,EAAAxC,UAAA+C,SAAA,SAASC,EAAalB,OAChBmB,EAAsB,iBAARnB,EAAmBA,EAAIoB,MAAM,KAAO,CAACpB,GACvDA,EAAM,GACN,GACEA,GAAOmB,EAAKE,SACRd,EAAUW,KAAWX,EAAUW,EAAOlB,KAAiC,iBAAhBkB,EAAOlB,IAAsBmB,EAAKxC,OAGjFwC,EAAKxC,OAGfqB,GAAO,IAFPkB,OAASI,GAHTJ,EAASA,EAAOlB,GAChBA,EAAM,UAMDmB,EAAKxC,QAEd,OAAOuC,GAGDR,EAAAxC,UAAA8C,oBAAR,SAA4BO,EAAcxB,GACxC,OAAOwB,EAAGxB,IAGJW,EAAAxC,UAAA6C,kBAAR,SAA0BD,EAAcf,GAAxC,IAAAY,EAAA3C,KACE,OAAK+B,EAIEe,EAAKU,QAAQxD,KAAK4C,iBAAe,SAAGa,EAAmBlE,OACxDmE,EAAIf,EAAKM,SAASlB,EAAQxC,GAC9B,OAAOgD,EAAUmB,GAAKA,EAAID,KALnBX,uBA3CZnB,EAAAA,aAmDDe,EAnDA,CAC4CiB,GCpB5C,MAAA,aASA,IAAAC,EAAA,SAAArC,GAAA,SAAAqC,mDASA,OAR2C9D,EAAA8D,EAAArC,GACzCqC,EAAA1D,UAAA2D,QAAA,SAAQzC,EAAeK,GACrB,OAAOL,GAGTwC,EAAA1D,UAAA4D,oBAAA,SAAoBC,EAAmBtC,GACrC,OAAOsC,uBAPVpC,EAAAA,aASDiC,EATA,CAC2CI,GCZ3CC,EAGA,WASSjE,KAAAkE,YAAsBlE,KAAKmE,YAK3BnE,KAAA+D,aAAoB,GAKpB/D,KAAAoE,MAAuB,GAQvBpE,KAAAqE,oBAA4D,IAAIC,EAAAA,aAQhEtE,KAAAuE,aAA8C,IAAID,EAAAA,aAQlDtE,KAAAwE,oBAA4D,IAAIF,EAAAA,cCnCzE,IAAaG,EAAY,IAAIC,EAAAA,eAAuB,aACvCC,EAAmB,IAAID,EAAAA,eAAuB,oBAC9CE,EAAmB,IAAIF,EAAAA,eAAuB,oBAC9CG,EAAa,IAAIH,EAAAA,eAAuB,cAuBrD,IAAAI,EAAA,WAmHE,SAAAA,EAAmBC,EACAC,EACAC,EACAC,EACAC,EAC2BC,EACPC,EACCC,EACFC,QAHQ,IAAAH,IAAAA,GAAA,QACP,IAAAC,IAAAA,GAAA,QACC,IAAAC,IAAAA,GAAA,GAPrBtF,KAAA+E,MAAAA,EACA/E,KAAAgF,cAAAA,EACAhF,KAAAiF,SAAAA,EACAjF,KAAAkF,OAAAA,EACAlF,KAAAmF,0BAAAA,EAC2BnF,KAAAoF,eAAAA,EACPpF,KAAAqF,QAAAA,EACCrF,KAAAsF,OAAAA,EAvHhCtF,KAAAwF,SAAmB,EACnBxF,KAAAyF,qBAA6D,IAAInB,EAAAA,aACjEtE,KAAA0F,cAA+C,IAAIpB,EAAAA,aACnDtE,KAAA2F,qBAA6D,IAAIrB,EAAAA,aAGjEtE,KAAA4F,OAAwB,GACxB5F,KAAA6F,cAAqB,GACrB7F,KAAA8F,qBAA4B,GAkH9BP,GACFvF,KAAK+F,eAAeR,GAgY1B,OA3eE/F,OAAAwG,eAAIlB,EAAA5E,UAAA,sBAAmB,KAAvB,WACE,OAAOF,KAAKqF,QAAUrF,KAAKyF,qBAAuBzF,KAAK+E,MAAMV,qDAS/D7E,OAAAwG,eAAIlB,EAAA5E,UAAA,eAAY,KAAhB,WACE,OAAOF,KAAKqF,QAAUrF,KAAK0F,cAAgB1F,KAAK+E,MAAMR,8CASxD/E,OAAAwG,eAAIlB,EAAA5E,UAAA,sBAAmB,KAAvB,WACE,OAAOF,KAAKqF,QAAUrF,KAAK2F,qBAAuB3F,KAAK+E,MAAMP,qDAM/DhF,OAAAwG,eAAIlB,EAAA5E,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKqF,QAAUrF,KAAKiG,aAAejG,KAAK+E,MAAMZ,iBAGvD,SAAgBA,GACVnE,KAAKqF,QACPrF,KAAKiG,aAAe9B,EAEpBnE,KAAK+E,MAAMZ,YAAcA,mCAO7B3E,OAAAwG,eAAIlB,EAAA5E,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKqF,QAAUrF,KAAKkG,aAAelG,KAAK+E,MAAMb,iBAGvD,SAAgBA,GACVlE,KAAKqF,QACPrF,KAAKkG,aAAehC,EAEpBlE,KAAK+E,MAAMb,YAAcA,mCAO7B1E,OAAAwG,eAAIlB,EAAA5E,UAAA,QAAK,KAAT,WACE,OAAOF,KAAKqF,QAAUrF,KAAK4F,OAAS5F,KAAK+E,MAAMX,WAGjD,SAAUA,GACJpE,KAAKqF,QACPrF,KAAK4F,OAASxB,EAEdpE,KAAK+E,MAAMX,MAAQA,mCAOvB5E,OAAAwG,eAAIlB,EAAA5E,UAAA,eAAY,KAAhB,WACE,OAAOF,KAAKqF,QAAUrF,KAAK6F,cAAgB7F,KAAK+E,MAAMhB,kBAGxD,SAAiBA,GACX/D,KAAKqF,QACPrF,KAAK6F,cAAgB9B,EAErB/D,KAAK+E,MAAMhB,aAAeA,mCAkCvBe,EAAA5E,UAAA6F,eAAP,SAAsBtE,GAAtB,IAAAkB,EAAA3C,KACE,GAAIyB,IAASzB,KAAKmE,YAAlB,KAIIqB,EAA2BxF,KAAKmG,qBAAqB1E,QAElC,IAAZ+D,GAEe,MAApBxF,KAAKmE,cACPnE,KAAKmE,YAAc1C,GAGrB+D,EAAQY,KAAKC,EAAAA,KAAK,IACfC,WAAS,SAAEC,GACV5D,EAAK6D,kBAAkB/E,OAG3BzB,KAAKwG,kBAAkB/E,KAOpBqD,EAAA5E,UAAAuG,eAAP,WACE,OAAOzG,KAAKmE,aAMPW,EAAA5E,UAAAwG,IAAP,SAAWjF,GAAX,IAAAkB,EAAA3C,KAEE,GAAIyB,IAASzB,KAAKkE,YAChB,OAAOxC,EAAAA,GAAG1B,KAAK+D,aAAatC,QAG1B+D,EAA2BxF,KAAKmG,qBAAqB1E,GAEzD,YAAuB,IAAZ+D,GAEJxF,KAAKkE,cACRlE,KAAKkE,YAAczC,GAGrB+D,EAAQY,KAAKC,EAAAA,KAAK,IACfC,WAAS,SAAEC,GACV5D,EAAKgE,WAAWlF,MAGb+D,IAEPxF,KAAK2G,WAAWlF,GAETC,EAAAA,GAAG1B,KAAK+D,aAAatC,MAOxBqD,EAAA5E,UAAAiG,qBAAR,SAA6B1E,OACvB+D,EAQJ,YALuC,IAA5BxF,KAAK+D,aAAatC,IAAyBzB,KAAKsF,UACzDtF,KAAK8F,qBAAqBrE,GAAQzB,KAAK8F,qBAAqBrE,IAASzB,KAAKwB,eAAeC,GACzF+D,EAAUxF,KAAK8F,qBAAqBrE,IAG/B+D,GAOFV,EAAA5E,UAAAsB,eAAP,SAAsBC,GAAtB,IAAAkB,EAAA3C,KACEA,KAAKwF,SAAU,MACToB,EAAsB5G,KAAKgF,cAAcxD,eAAeC,GAAM2E,KAClES,EAAAA,YAAY,GACZR,EAAAA,KAAK,IAqBP,OAlBArG,KAAK4G,oBAAsBA,EAAoBR,KAC7CU,EAAAA,KAAG,SAAEP,GAAgB,OAAA5D,EAAKsC,SAASnB,oBAAoByC,EAAK9E,MAC5DoF,EAAAA,YAAY,GACZR,EAAAA,KAAK,IAGPrG,KAAK4G,oBACFN,UAAU,CACTnF,KAAI,SAAGoF,GACL5D,EAAKoB,aAAatC,GAAQkB,EAAK2C,QAAU3C,EAAKoB,aAAatC,GAAKrB,EAAAA,EAAA,GAAQmG,GAAQ5D,EAAKoB,aAAatC,IAAU8E,EAC5G5D,EAAKoE,cACLpE,EAAK6C,SAAU,GAEjBwB,MAAK,SAAGC,GACNtE,EAAK6C,SAAU,KAIdoB,GAOF9B,EAAA5E,UAAAgH,eAAP,SAAsBzF,EAAcsC,EAAsBoD,QAAA,IAAAA,IAAAA,GAAA,GACxDpD,EAAe/D,KAAKiF,SAASnB,oBAAoBC,EAActC,IAC1D0F,GAAenH,KAAKsF,SAAWtF,KAAK+D,aAAatC,GACpDzB,KAAK+D,aAAatC,GJhOxB,SAAgB2F,EAAUlE,EAAamE,OACjCC,EAAS9H,OAAOa,OAAO,GAAI6C,GAc/B,OAbIV,EAASU,IAAWV,EAAS6E,IAC/B7H,OAAO2D,KAAKkE,GAAQE,SAAO,SAAEvF,WACvBQ,EAAS6E,EAAOrF,IACZA,KAAOkB,EAGXoE,EAAOtF,GAAOoF,EAAUlE,EAAOlB,GAAMqF,EAAOrF,IAF5CxC,OAAOa,OAAOiH,IAAME,EAAA,IAAIxF,GAAMqF,EAAOrF,GAAIwF,IAK3ChI,OAAOa,OAAOiH,IAAMG,EAAA,IAAIzF,GAAMqF,EAAOrF,GAAIyF,OAIxCH,EIiNuBF,CAAUpH,KAAK+D,aAAatC,GAAOsC,GAE7D/D,KAAK+D,aAAatC,GAAQsC,EAE5B/D,KAAK+G,cACL/G,KAAKqE,oBAAoBqD,KAAK,CAACjG,KAAMA,EAAMsC,aAAc/D,KAAK+D,aAAatC,MAMtEqD,EAAA5E,UAAAyH,SAAP,WACE,OAAO3H,KAAKoE,OAMPU,EAAA5E,UAAA0H,SAAP,SAAgBxD,GAAhB,IAAAzB,EAAA3C,KACEoE,EAAMmD,SAAO,SAAE9F,IACqB,IAA9BkB,EAAKyB,MAAMyD,QAAQpG,IACrBkB,EAAKyB,MAAM0D,KAAKrG,OAQdqD,EAAA5E,UAAA6G,YAAR,WACE/G,KAAK4H,SAASpI,OAAO2D,KAAKnD,KAAK+D,gBAM1Be,EAAA5E,UAAA6H,gBAAP,SAAuBhE,EAAmB/B,EAAUgG,WAO9CzB,EAEJ,GANA0B,QAAQC,IAAI,wBAAyBnE,GACrCkE,QAAQC,IAAI,gBAAiBlG,GAC7BiG,QAAQC,IAAI,oBAAqBF,GAI7BhG,aAAerC,MAAO,KACpBwI,EAAc,GAChBC,GAAuB,MACzB,IAAc,IAAAC,EAAAvH,EAAAkB,GAAGsG,EAAAD,EAAAlH,QAAAmH,EAAAjH,KAAAiH,EAAAD,EAAAlH,OAAE,CAAd,IAAIoH,EAACD,EAAAlH,MACR+G,EAAOI,GAAKvI,KAAK+H,gBAAgBhE,EAAcwE,EAAGP,GAC9CQ,EAAAA,aAAaL,EAAOI,MACtBH,GAAc,qGAGlB,GAAIA,EAAa,KACTK,EAAUzG,EAAI8E,KAAG,SAACyB,GAAK,OAAAC,EAAAA,aAAaL,EAAOI,IAAMJ,EAAOI,GAAK7G,EAAAA,GAAGyG,EAAOI,OAC7E,OAAOG,EAAAA,SAASD,GAASrC,KACvBU,EAAAA,KAAG,SAAE6B,OACCC,EAAW,GAIf,OAHAD,EAAIpB,SAAO,SAAEnG,EAAeyH,GAC1BD,EAAI5G,EAAI6G,IAAUzH,KAEbwH,MAIb,OAAOT,EAWT,GARIpE,IACFwC,EAAMvG,KAAKkF,OAAOrC,YAAY7C,KAAKkF,OAAOjC,SAASc,EAAc/B,GAAMgG,SAGtD,IAARzB,GAA2C,MAApBvG,KAAKmE,aAAuBnE,KAAKmE,cAAgBnE,KAAKkE,aAAelE,KAAKoF,iBAC1GmB,EAAMvG,KAAKkF,OAAOrC,YAAY7C,KAAKkF,OAAOjC,SAASjD,KAAK+D,aAAa/D,KAAKmE,aAAcnC,GAAMgG,SAG7E,IAARzB,EAAqB,KAC1BxE,EAA0C,CAACC,IAAGA,EAAE8G,iBAAkB9I,WACrC,IAAtBgI,IACTjG,EAAOiG,kBAAoBA,GAE7BzB,EAAMvG,KAAKmF,0BAA0BrD,OAAOC,GAG9C,YAAsB,IAARwE,EAAsBA,EAAMvE,GAOrC8C,EAAA5E,UAAA6I,IAAP,SAAW/G,EAA6BgG,GAAxC,IAAArF,EAAA3C,KACE,IAAKuC,EAAUP,KAASA,EAAIrB,OAC1B,MAAM,IAAIqI,MAAM,4BAGlB,GAAIhJ,KAAKwF,QACP,OAAOxF,KAAK4G,oBAAoBR,KAC9B6C,EAAAA,WAAS,SAAE1C,GAET,OADAA,EAAM5D,EAAKoF,gBAAgBxB,EAAKvE,EAAKgG,GAC9BQ,EAAAA,aAAajC,GAAOA,EAAM7E,EAAAA,GAAG6E,WAIpCA,EAAMvG,KAAK+H,gBAAgB/H,KAAK+D,aAAa/D,KAAKkE,aAAclC,EAAKgG,GACzE,OAAOQ,EAAAA,aAAajC,GAAOA,EAAM7E,EAAAA,GAAG6E,IASjCzB,EAAA5E,UAAAgJ,6BAAP,SAAoClH,EAA6BgG,GAAjE,IAAArF,EAAA3C,KACE,IAAKuC,EAAUP,KAASA,EAAIrB,OAC1B,MAAM,IAAIqI,MAAM,4BAGlB,OAAOG,EAAAA,OACLC,EAAAA,OAAK,WAAO,OAAAzG,EAAKoG,IAAI/G,EAAKgG,MAC1BhI,KAAKqE,oBAAoB+B,KACvBiD,EAAAA,WAAS,SAAEC,OACH/C,EAAM5D,EAAKoF,gBAAgBuB,EAAMvF,aAAc/B,EAAKgG,GAC1D,MAA6B,mBAAlBzB,EAAID,UACNC,EAEA7E,EAAAA,GAAG6E,SAYbzB,EAAA5E,UAAAqJ,OAAP,SAAcvH,EAA6BgG,GAA3C,IAAArF,EAAA3C,KACE,IAAKuC,EAAUP,KAASA,EAAIrB,OAC1B,MAAM,IAAIqI,MAAM,4BAGlB,OAAOG,EAAAA,OACLC,EAAAA,OAAK,WAAO,OAAAzG,EAAKoG,IAAI/G,EAAKgG,MAC1BhI,KAAKuE,aAAa6B,KAChBiD,EAAAA,WAAS,SAAEC,OACH/C,EAAM5D,EAAKoF,gBAAgBuB,EAAMvF,aAAc/B,EAAKgG,GAC1D,OAAOQ,EAAAA,aAAajC,GAAOA,EAAM7E,EAAAA,GAAG6E,SASrCzB,EAAA5E,UAAAsJ,QAAP,SAAexH,EAA6BgG,GAC1C,IAAKzF,EAAUP,KAASA,EAAIrB,OAC1B,MAAM,IAAIqI,MAAM,gCAGdzC,EAAMvG,KAAK+H,gBAAgB/H,KAAK+D,aAAa/D,KAAKkE,aAAclC,EAAKgG,GACzE,GAAIQ,EAAAA,aAAajC,GAAM,CACrB,GAAIvE,aAAerC,MAAO,KACpB8J,EAAW,GAIf,OAHAzH,EAAIuF,SAAO,SAAEnG,EAAeyH,GAC1BY,EAAIzH,EAAI6G,IAAU7G,EAAI6G,MAEjBY,EAET,OAAOzH,EAEP,OAAOuE,GAOJzB,EAAA5E,UAAAwJ,IAAP,SAAW1H,EAAaZ,EAAeK,QAAA,IAAAA,IAAAA,EAAezB,KAAKkE,aACzDlE,KAAK+D,aAAatC,GAAMO,GAAOhC,KAAKiF,SAASpB,QAAQzC,EAAOK,GAC5DzB,KAAK+G,cACL/G,KAAKqE,oBAAoBqD,KAAK,CAACjG,KAAMA,EAAMsC,aAAc/D,KAAK+D,aAAatC,MAMrEqD,EAAA5E,UAAAyG,WAAR,SAAmBlF,GACjBzB,KAAKkE,YAAczC,EACnBzB,KAAKuE,aAAamD,KAAK,CAACjG,KAAMA,EAAMsC,aAAc/D,KAAK+D,aAAatC,KAG5C,MAApBzB,KAAKmE,aACPnE,KAAKwG,kBAAkB/E,IAOnBqD,EAAA5E,UAAAsG,kBAAR,SAA0B/E,GACxBzB,KAAKmE,YAAc1C,EACnBzB,KAAKwE,oBAAoBkD,KAAK,CAACjG,KAAMA,EAAMsC,aAAc/D,KAAK+D,aAAatC,MAMtEqD,EAAA5E,UAAAyJ,WAAP,SAAkBlI,GAEhB,OADAzB,KAAK4J,UAAUnI,GACRzB,KAAKwB,eAAeC,IAMtBqD,EAAA5E,UAAA0J,UAAP,SAAiBnI,GACfzB,KAAK8F,qBAAqBrE,QAAQ6B,EAClCtD,KAAK+D,aAAatC,QAAQ6B,GAMrBwB,EAAA5E,UAAA2J,eAAP,WACE,GAAsB,oBAAXC,aAAsD,IAArBA,OAAOC,UAAnD,KAIIC,EAAmBF,OAAOC,UAAUE,UAAYH,OAAOC,UAAUE,UAAU,GAAK,KAGpF,QAA2B,KAF3BD,EAAcA,GAAeF,OAAOC,UAAUG,UAAYJ,OAAOC,UAAUI,iBAAmBL,OAAOC,UAAUK,cAc/G,OARkC,IAA9BJ,EAAYnC,QAAQ,OACtBmC,EAAcA,EAAY5G,MAAM,KAAK,KAGL,IAA9B4G,EAAYnC,QAAQ,OACtBmC,EAAcA,EAAY5G,MAAM,KAAK,IAGhC4G,IAMFlF,EAAA5E,UAAAmK,sBAAP,WACE,GAAsB,oBAAXP,aAAsD,IAArBA,OAAOC,UAAnD,KAIIO,EAA0BR,OAAOC,UAAUE,UAAYH,OAAOC,UAAUE,UAAU,GAAK,KAG3F,OAFAK,EAAqBA,GAAsBR,OAAOC,UAAUG,UAAYJ,OAAOC,UAAUI,iBAAmBL,OAAOC,UAAUK,mCA1fhIzI,EAAAA,sDA7BOsC,SAHArC,SADAoC,SAEAL,SAHA4G,mCA0JOC,EAAAA,OAAMC,KAAA,CAAC9F,sCACP6F,EAAAA,OAAMC,KAAA,CAAChG,sCACP+F,EAAAA,OAAMC,KAAA,CAAC5F,qCACP2F,EAAAA,OAAMC,KAAA,CAAC7F,QAmYtBE,EA9fA,GCrCA,IAAA4F,EAAA,WA8BE,SAAAA,EAAoB5B,EAA4C6B,EAA6BC,GAA7F,IAAAjI,EAAA3C,KAAoBA,KAAA8I,iBAAAA,EAA4C9I,KAAA2K,QAAAA,EAA6B3K,KAAA4K,KAAAA,EAEtF5K,KAAK6K,yBACR7K,KAAK6K,uBAAyB7K,KAAK8I,iBAAiBzE,oBAAoBiC,WAAS,SAAEgD,GAC7EA,EAAM7H,OAASkB,EAAKmG,iBAAiB5E,aACvCvB,EAAKmI,YAAW,EAAMxB,EAAMvF,kBAM7B/D,KAAK+K,kBACR/K,KAAK+K,gBAAkB/K,KAAK8I,iBAAiBvE,aAAa+B,WAAS,SAAEgD,GACnE3G,EAAKmI,YAAW,EAAMxB,EAAMvF,kBAK3B/D,KAAKgL,yBACRhL,KAAKgL,uBAAyBhL,KAAK8I,iBAAiBtE,oBAAoB8B,WAAS,SAAEgD,GACjF3G,EAAKmI,YAAW,OAiHxB,OAnJEtL,OAAAwG,eAAa0E,EAAAxK,UAAA,YAAS,KAAtB,SAAuB8B,GACjBA,IACFhC,KAAKgC,IAAMA,EACXhC,KAAK8K,+CAITtL,OAAAwG,eAAa0E,EAAAxK,UAAA,kBAAe,KAA5B,SAA6B6B,GACtBE,EAAOjC,KAAKiL,cAAelJ,KAC9B/B,KAAKiL,cAAgBlJ,EACrB/B,KAAK8K,YAAW,qCA6BpBJ,EAAAxK,UAAAgL,mBAAA,WACElL,KAAK8K,cAGPJ,EAAAxK,UAAA4K,WAAA,SAAWK,EAAqBpH,QAArB,IAAAoH,IAAAA,GAAA,OACLC,EAAkBpL,KAAK2K,QAAQU,cAAcC,WAE5CF,EAAMzK,SAETX,KAAKuL,WAAWvL,KAAK2K,QAAQU,cAAerL,KAAKgC,KACjDoJ,EAAQpL,KAAK2K,QAAQU,cAAcC,YAErC,IAAK,IAAI9K,EAAI,EAAGA,EAAI4K,EAAMzK,SAAUH,EAAG,KACjCgL,EAAYJ,EAAM5K,GACtB,GAAsB,IAAlBgL,EAAKC,SAAgB,KACnBzJ,OAAG,EAIP,GAHImJ,IACFK,EAAKE,QAAU,MAEdnJ,EAAUiJ,EAAKG,WAChB3J,EAAMwJ,EAAKG,eACN,GAAI3L,KAAKgC,IACdA,EAAMhC,KAAKgC,QACN,KACD4J,EAAU5L,KAAK6L,WAAWL,GAC1BM,EAAiBF,EAAQG,OACzBD,EAAenL,SACjB6K,EAAKG,UAAYG,EAEbF,IAAYJ,EAAKQ,cACnBhK,EAAM8J,EAENN,EAAKS,gBAAkBL,GAAWJ,EAAKS,iBAC9BT,EAAKS,gBAEdjK,EAAMwJ,EAAKS,gBAAgBF,OAClBH,IAAYJ,EAAKQ,eAE1BhK,EAAM8J,EAENN,EAAKS,gBAAkBL,GAAWJ,EAAKS,kBAI7CjM,KAAKkM,YAAYlK,EAAKwJ,EAAMzH,MAKlC2G,EAAAxK,UAAAgM,YAAA,SAAYlK,EAAawJ,EAAWzH,GAApC,IAAApB,EAAA3C,KACE,GAAIgC,EAAK,CACP,GAAIwJ,EAAKE,UAAY1J,GAAOhC,KAAKmM,aAAenM,KAAKiL,cACnD,OAGFjL,KAAKmM,WAAanM,KAAKiL,kBAEnBmB,EAAa,SAAI7F,GACfA,IAAQvE,IACVwJ,EAAKE,QAAU1J,GAEZwJ,EAAKS,kBACRT,EAAKS,gBAAkBtJ,EAAKkJ,WAAWL,IAEzCA,EAAKQ,aAAezJ,EAAUgE,GAAOA,EAAOiF,EAAKS,iBAAmBjK,EAEpEW,EAAK4I,WAAWC,EAAM7I,EAAKX,IAAMwJ,EAAKQ,aAAeR,EAAKS,gBAAgBzI,QAAQxB,EAAKwJ,EAAKQ,eAC5FrJ,EAAKiI,KAAKyB,gBAGZ,GAAI9J,EAAUwB,GAAe,KACvBwC,EAAMvG,KAAK8I,iBAAiBf,gBAAgBhE,EAAc/B,EAAKhC,KAAKiL,eACpEzC,EAAAA,aAAajC,GACfA,EAAID,UAAU8F,GAEdA,EAAc7F,QAGhBvG,KAAK8I,iBAAiBC,IAAI/G,EAAKhC,KAAKiL,eAAe3E,UAAU8F,KAKnE1B,EAAAxK,UAAA2L,WAAA,SAAWL,GACT,OAAOjJ,EAAUiJ,EAAKc,aAAed,EAAKc,YAAcd,EAAKe,MAG/D7B,EAAAxK,UAAAqL,WAAA,SAAWC,EAAWI,GAChBrJ,EAAUiJ,EAAKc,aACjBd,EAAKc,YAAcV,EAEnBJ,EAAKe,KAAOX,GAIhBlB,EAAAxK,UAAAsM,YAAA,WACMxM,KAAK+K,iBACP/K,KAAK+K,gBAAgB0B,cAGnBzM,KAAKgL,wBACPhL,KAAKgL,uBAAuByB,cAG1BzM,KAAK6K,wBACP7K,KAAK6K,uBAAuB4B,mCA3JjCC,EAAAA,UAASjC,KAAA,CAAC,CACTkC,SAAU,2EAJqC7H,SAFO8H,EAAAA,kBAA9BC,EAAAA,wDAgBvBC,EAAAA,+BAOAA,EAAAA,SA4IHpC,EAnKA,GCAA,IAAAqC,EAAA,WAmBE,SAAAA,EAAoBC,EAAqCpC,GAArC5K,KAAAgN,UAAAA,EAAqChN,KAAA4K,KAAAA,EAPzD5K,KAAAoB,MAAgB,GAyHlB,OA/GE2L,EAAA7M,UAAAgM,YAAA,SAAYlK,EAAagG,EAA4BjE,GAArD,IAAApB,EAAA3C,KACMoM,EAAa,SAAI7F,GACnB5D,EAAKvB,WAAgBkC,IAARiD,EAAoBA,EAAMvE,EACvCW,EAAK+I,QAAU1J,EACfW,EAAKiI,KAAKyB,gBAEZ,GAAItI,EAAc,KACZwC,EAAMvG,KAAKgN,UAAUjF,gBAAgBhE,EAAc/B,EAAKgG,GACxDQ,EAAAA,aAAajC,EAAID,WACnBC,EAAID,UAAU8F,GAEdA,EAAc7F,GAGlBvG,KAAKgN,UAAUjE,IAAI/G,EAAKgG,GAAmB1B,UAAU8F,IAGvDW,EAAA7M,UAAA+M,UAAA,SAAUC,OAAV,IAUMlF,EAVNrF,EAAA3C,KAAyByK,EAAA,GAAA0C,EAAA,EAAAA,EAAAzM,UAAAC,OAAAwM,IAAA1C,EAAA0C,EAAA,GAAAzM,UAAAyM,GACvB,IAAKD,IAAUA,EAAMvM,OACnB,OAAOuM,EAIT,GAAIjL,EAAOiL,EAAOlN,KAAK0L,UAAYzJ,EAAOwI,EAAMzK,KAAKmM,YACnD,OAAOnM,KAAKoB,MAId,GAAImB,EAAUkI,EAAK,KAAOA,EAAK9J,OAC7B,GAAuB,iBAAZ8J,EAAK,IAAmBA,EAAK,GAAG9J,OAAQ,KAG7CyM,EAAoB3C,EAAK,GAC1BjH,QAAQ,mCAAoC,SAC5CA,QAAQ,uBAAwB,SACnC,IACEwE,EAAoBqF,KAAKC,MAAMF,GAC/B,MAAOG,GACP,MAAM,IAAIC,YAAY,wEAAwE/C,EAAK,SAEzE,iBAAZA,EAAK,IAAoB9K,MAAM2C,QAAQmI,EAAK,MAC5DzC,EAAoByC,EAAK,IA8C7B,OAzCAzK,KAAK0L,QAAUwB,EAGflN,KAAKmM,WAAa1B,EAGlBzK,KAAKkM,YAAYgB,EAAOlF,GAGxBhI,KAAKyN,WAGAzN,KAAKqE,sBACRrE,KAAKqE,oBAAsBrE,KAAKgN,UAAU3I,oBAAoBiC,WAAS,SAAEgD,GACnE3G,EAAK+I,SAAWpC,EAAM7H,OAASkB,EAAKqK,UAAU9I,cAChDvB,EAAK+I,QAAU,KACf/I,EAAKuJ,YAAYgB,EAAOlF,EAAmBsB,EAAMvF,mBAMlD/D,KAAKuE,eACRvE,KAAKuE,aAAevE,KAAKgN,UAAUzI,aAAa+B,WAAS,SAAEgD,GACrD3G,EAAK+I,UACP/I,EAAK+I,QAAU,KACf/I,EAAKuJ,YAAYgB,EAAOlF,EAAmBsB,EAAMvF,mBAMlD/D,KAAKwE,sBACRxE,KAAKwE,oBAAsBxE,KAAKgN,UAAUxI,oBAAoB8B,WAAS,WACjE3D,EAAK+I,UACP/I,EAAK+I,QAAU,KACf/I,EAAKuJ,YAAYgB,EAAOlF,QAKvBhI,KAAKoB,OAMN2L,EAAA7M,UAAAuN,SAAR,gBAC0C,IAA7BzN,KAAKqE,sBACdrE,KAAKqE,oBAAoBoI,cACzBzM,KAAKqE,yBAAsBf,QAEI,IAAtBtD,KAAKuE,eACdvE,KAAKuE,aAAakI,cAClBzM,KAAKuE,kBAAejB,QAEkB,IAA7BtD,KAAKwE,sBACdxE,KAAKwE,oBAAoBiI,cACzBzM,KAAKwE,yBAAsBlB,IAI/ByJ,EAAA7M,UAAAsM,YAAA,WACExM,KAAKyN,gCA7HR9L,EAAAA,kBACA+L,EAAAA,KAAIjD,KAAA,CAAC,CACJkD,KAAM,YACNC,MAAM,+CAPyC9I,SAFzC+H,EAAAA,qBAqIRE,EArIA,GCgCA,IAAAc,EAAA,WAAA,SAAAA,KAmDA,OArCSA,EAAAC,QAAP,SAAeC,GACb,YADa,IAAAA,IAAAA,EAAA,IACN,CACLC,SAAUH,EACVI,UAAW,CACTF,EAAOG,QAAU,CAACC,QAASvM,EAAiBwM,SAAU9M,GACtDyM,EAAO9I,UAAY,CAACkJ,QAASnK,EAAmBoK,SAAUxK,GAC1DmK,EAAO7I,QAAU,CAACiJ,QAASxK,EAAiByK,SAAU1L,GACtDqL,EAAO5I,2BAA6B,CAACgJ,QAAS5D,EAA2B6D,SAAUvM,GACnFoC,EACA,CAACkK,QAAS1J,EAAW4J,SAAUN,EAAO1I,SACtC,CAAC8I,QAASxJ,EAAkB0J,SAAUN,EAAO3I,gBAC7C,CAAC+I,QAAStJ,EAAYwJ,SAAUN,EAAOzI,QACvC,CAAC6I,QAASvJ,EAAkByJ,SAAUN,EAAOxI,iBAC7CT,KAQC+I,EAAAS,SAAP,SAAgBP,GACd,YADc,IAAAA,IAAAA,EAAA,IACP,CACLC,SAAUH,EACVI,UAAW,CACTF,EAAOG,QAAU,CAACC,QAASvM,EAAiBwM,SAAU9M,GACtDyM,EAAO9I,UAAY,CAACkJ,QAASnK,EAAmBoK,SAAUxK,GAC1DmK,EAAO7I,QAAU,CAACiJ,QAASxK,EAAiByK,SAAU1L,GACtDqL,EAAO5I,2BAA6B,CAACgJ,QAAS5D,EAA2B6D,SAAUvM,GACnF,CAACsM,QAAS1J,EAAW4J,SAAUN,EAAO1I,SACtC,CAAC8I,QAASxJ,EAAkB0J,SAAUN,EAAO3I,gBAC7C,CAAC+I,QAAStJ,EAAYwJ,SAAUN,EAAOzI,QACvC,CAAC6I,QAASvJ,EAAkByJ,SAAUN,EAAOxI,iBAC7CT,yBA/CPyJ,EAAAA,SAAQ9D,KAAA,CAAC,CACR+D,aAAc,CACZzB,EACArC,GAEF+D,QAAS,CACP1B,EACArC,OA4CJmD,EAnDA","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {Observable, of} from \"rxjs\";\r\n\r\nexport abstract class TranslateLoader {\r\n  abstract getTranslation(lang: string): Observable<any>;\r\n}\r\n\r\n/**\r\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\r\n */\r\n@Injectable()\r\nexport class TranslateFakeLoader extends TranslateLoader {\r\n  getTranslation(lang: string): Observable<any> {\r\n    return of({});\r\n  }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {TranslateService} from \"./translate.service\";\r\n\r\nexport interface MissingTranslationHandlerParams {\r\n  /**\r\n   * the key that's missing in translation files\r\n   */\r\n  key: string;\r\n\r\n  /**\r\n   * an instance of the service that was unable to translate the key.\r\n   */\r\n  translateService: TranslateService;\r\n\r\n  /**\r\n   * interpolation params that were passed along for translating the given key.\r\n   */\r\n  interpolateParams?: Object;\r\n}\r\n\r\nexport abstract class MissingTranslationHandler {\r\n  /**\r\n   * A function that handles missing translations.\r\n   *\r\n   * @param params context for resolving a missing translation\r\n   * @returns a value or an observable\r\n   * If it returns a value, then this value is used.\r\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\r\n   * If it doesn't return then the key will be used as a value\r\n   */\r\n  abstract handle(params: MissingTranslationHandlerParams): any;\r\n}\r\n\r\n/**\r\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\r\n */\r\n@Injectable()\r\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\r\n  handle(params: MissingTranslationHandlerParams): string {\r\n    return params.key;\r\n  }\r\n}\r\n","/* tslint:disable */\r\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\r\nexport function equals(o1: any, o2: any): boolean {\r\n  if (o1 === o2) return true;\r\n  if (o1 === null || o2 === null) return false;\r\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\r\n  let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\r\n  if (t1 == t2 && t1 == 'object') {\r\n    if (Array.isArray(o1)) {\r\n      if (!Array.isArray(o2)) return false;\r\n      if ((length = o1.length) == o2.length) {\r\n        for (key = 0; key < length; key++) {\r\n          if (!equals(o1[key], o2[key])) return false;\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      if (Array.isArray(o2)) {\r\n        return false;\r\n      }\r\n      keySet = Object.create(null);\r\n      for (key in o1) {\r\n        if (!equals(o1[key], o2[key])) {\r\n          return false;\r\n        }\r\n        keySet[key] = true;\r\n      }\r\n      for (key in o2) {\r\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n/* tslint:enable */\r\n\r\nexport function isDefined(value: any): boolean {\r\n  return typeof value !== 'undefined' && value !== null;\r\n}\r\n\r\nexport function isObject(item: any): boolean {\r\n  return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target: any, source: any): any {\r\n  let output = Object.assign({}, target);\r\n  if (isObject(target) && isObject(source)) {\r\n    Object.keys(source).forEach((key: any) => {\r\n      if (isObject(source[key])) {\r\n        if (!(key in target)) {\r\n          Object.assign(output, {[key]: source[key]});\r\n        } else {\r\n          output[key] = mergeDeep(target[key], source[key]);\r\n        }\r\n      } else {\r\n        Object.assign(output, {[key]: source[key]});\r\n      }\r\n    });\r\n  }\r\n  return output;\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {isDefined} from \"./util\";\r\n\r\nexport abstract class TranslateParser {\r\n  /**\r\n   * Interpolates a string to replace parameters\r\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\r\n   * @param expr\r\n   * @param params\r\n   */\r\n  abstract interpolate(expr: string | Function, params?: any): string;\r\n\r\n  /**\r\n   * Gets a value from an object by composed key\r\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\r\n   * @param target\r\n   * @param key\r\n   */\r\n  abstract getValue(target: any, key: string): any\r\n}\r\n\r\n@Injectable()\r\nexport class TranslateDefaultParser extends TranslateParser {\r\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\r\n\r\n  public interpolate(expr: string | Function, params?: any): string {\r\n    let result: string;\r\n\r\n    if (typeof expr === 'string') {\r\n      result = this.interpolateString(expr, params);\r\n    } else if (typeof expr === 'function') {\r\n      result = this.interpolateFunction(expr, params);\r\n    } else {\r\n      // this should not happen, but an unrelated TranslateService test depends on it\r\n      result = expr as string;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  getValue(target: any, key: string): any {\r\n    let keys = typeof key === 'string' ? key.split('.') : [key];\r\n    key = '';\r\n    do {\r\n      key += keys.shift();\r\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\r\n        target = target[key];\r\n        key = '';\r\n      } else if (!keys.length) {\r\n        target = undefined;\r\n      } else {\r\n        key += '.';\r\n      }\r\n    } while (keys.length);\r\n\r\n    return target;\r\n  }\r\n\r\n  private interpolateFunction(fn: Function, params?: any) {\r\n    return fn(params);\r\n  }\r\n\r\n  private interpolateString(expr: string, params?: any) {\r\n    if (!params) {\r\n      return expr;\r\n    }\r\n\r\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\r\n      let r = this.getValue(params, b);\r\n      return isDefined(r) ? r : substring;\r\n    });\r\n  }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\n\r\nexport abstract class TranslateCompiler {\r\n  abstract compile(value: string, lang: string): string | Function;\r\n\r\n  abstract compileTranslations(translations: any, lang: string): any;\r\n}\r\n\r\n/**\r\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\r\n */\r\n@Injectable()\r\nexport class TranslateFakeCompiler extends TranslateCompiler {\r\n  compile(value: string, lang: string): string | Function {\r\n    return value;\r\n  }\r\n\r\n  compileTranslations(translations: any, lang: string): any {\r\n    return translations;\r\n  }\r\n}\r\n","import {EventEmitter} from \"@angular/core\";\r\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\r\n\r\nexport class TranslateStore {\r\n  /**\r\n   * The default lang to fallback when translations are missing on the current lang\r\n   */\r\n  public defaultLang: string;\r\n\r\n  /**\r\n   * The lang currently used\r\n   */\r\n  public currentLang: string = this.defaultLang;\r\n\r\n  /**\r\n   * a list of translations per lang\r\n   */\r\n  public translations: any = {};\r\n\r\n  /**\r\n   * an array of langs\r\n   */\r\n  public langs: Array<string> = [];\r\n\r\n  /**\r\n   * An EventEmitter to listen to translation change events\r\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\r\n\r\n  /**\r\n   * An EventEmitter to listen to lang change events\r\n   * onLangChange.subscribe((params: LangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\r\n\r\n  /**\r\n   * An EventEmitter to listen to default lang change events\r\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\r\n}\r\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\r\nimport {concat, forkJoin, isObservable, Observable, of, defer} from \"rxjs\";\r\nimport {concatMap, map, shareReplay, switchMap, take} from \"rxjs/operators\";\r\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\r\nimport {TranslateCompiler} from \"./translate.compiler\";\r\nimport {TranslateLoader} from \"./translate.loader\";\r\nimport {TranslateParser} from \"./translate.parser\";\r\n\r\nimport {TranslateStore} from \"./translate.store\";\r\nimport {isDefined, mergeDeep} from \"./util\";\r\n\r\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\r\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\r\nexport const DEFAULT_LANGUAGE = new InjectionToken<string>('DEFAULT_LANGUAGE');\r\nexport const USE_EXTEND = new InjectionToken<string>('USE_EXTEND');\r\n\r\nexport interface TranslationChangeEvent {\r\n  translations: any;\r\n  lang: string;\r\n}\r\n\r\nexport interface LangChangeEvent {\r\n  lang: string;\r\n  translations: any;\r\n}\r\n\r\nexport interface DefaultLangChangeEvent {\r\n  lang: string;\r\n  translations: any;\r\n}\r\n\r\ndeclare interface Window {\r\n  navigator: any;\r\n}\r\n\r\ndeclare const window: Window;\r\n\r\n@Injectable()\r\nexport class TranslateService {\r\n  private loadingTranslations: Observable<any>;\r\n  private pending: boolean = false;\r\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\r\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\r\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\r\n  private _defaultLang: string;\r\n  private _currentLang: string;\r\n  private _langs: Array<string> = [];\r\n  private _translations: any = {};\r\n  private _translationRequests: any = {};\r\n\r\n  /**\r\n   * An EventEmitter to listen to translation change events\r\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\r\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\r\n  }\r\n\r\n  /**\r\n   * An EventEmitter to listen to lang change events\r\n   * onLangChange.subscribe((params: LangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  get onLangChange(): EventEmitter<LangChangeEvent> {\r\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\r\n  }\r\n\r\n  /**\r\n   * An EventEmitter to listen to default lang change events\r\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  get onDefaultLangChange() {\r\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\r\n  }\r\n\r\n  /**\r\n   * The default lang to fallback when translations are missing on the current lang\r\n   */\r\n  get defaultLang(): string {\r\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\r\n  }\r\n\r\n  set defaultLang(defaultLang: string) {\r\n    if (this.isolate) {\r\n      this._defaultLang = defaultLang;\r\n    } else {\r\n      this.store.defaultLang = defaultLang;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The lang currently used\r\n   */\r\n  get currentLang(): string {\r\n    return this.isolate ? this._currentLang : this.store.currentLang;\r\n  }\r\n\r\n  set currentLang(currentLang: string) {\r\n    if (this.isolate) {\r\n      this._currentLang = currentLang;\r\n    } else {\r\n      this.store.currentLang = currentLang;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * an array of langs\r\n   */\r\n  get langs(): string[] {\r\n    return this.isolate ? this._langs : this.store.langs;\r\n  }\r\n\r\n  set langs(langs: string[]) {\r\n    if (this.isolate) {\r\n      this._langs = langs;\r\n    } else {\r\n      this.store.langs = langs;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * a list of translations per lang\r\n   */\r\n  get translations(): any {\r\n    return this.isolate ? this._translations : this.store.translations;\r\n  }\r\n\r\n  set translations(translations: any) {\r\n    if (this.isolate) {\r\n      this._translations = translations;\r\n    } else {\r\n      this.store.translations = translations;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param store an instance of the store (that is supposed to be unique)\r\n   * @param currentLoader An instance of the loader currently used\r\n   * @param compiler An instance of the compiler currently used\r\n   * @param parser An instance of the parser currently used\r\n   * @param missingTranslationHandler A handler for missing translations.\r\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\r\n   * @param isolate whether this service should use the store or not\r\n   * @param extend To make a child module extend (and use) translations from parent modules.\r\n   * @param defaultLanguage Set the default language using configuration\r\n   */\r\n  constructor(public store: TranslateStore,\r\n              public currentLoader: TranslateLoader,\r\n              public compiler: TranslateCompiler,\r\n              public parser: TranslateParser,\r\n              public missingTranslationHandler: MissingTranslationHandler,\r\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\r\n              @Inject(USE_STORE) private isolate: boolean = false,\r\n              @Inject(USE_EXTEND) private extend: boolean = false,\r\n              @Inject(DEFAULT_LANGUAGE) defaultLanguage: string) {\r\n    /** set the default language from configuration */\r\n    if (defaultLanguage) {\r\n      this.setDefaultLang(defaultLanguage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the default language to use as a fallback\r\n   */\r\n  public setDefaultLang(lang: string): void {\r\n    if (lang === this.defaultLang) {\r\n      return;\r\n    }\r\n\r\n    let pending: Observable<any> = this.retrieveTranslations(lang);\r\n\r\n    if (typeof pending !== \"undefined\") {\r\n      // on init set the defaultLang immediately\r\n      if (this.defaultLang == null) {\r\n        this.defaultLang = lang;\r\n      }\r\n\r\n      pending.pipe(take(1))\r\n        .subscribe((res: any) => {\r\n          this.changeDefaultLang(lang);\r\n        });\r\n    } else { // we already have this language\r\n      this.changeDefaultLang(lang);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the default language used\r\n   */\r\n  public getDefaultLang(): string {\r\n    return this.defaultLang;\r\n  }\r\n\r\n  /**\r\n   * Changes the lang currently used\r\n   */\r\n  public use(lang: string): Observable<any> {\r\n    // don't change the language if the language given is already selected\r\n    if (lang === this.currentLang) {\r\n      return of(this.translations[lang]);\r\n    }\r\n\r\n    let pending: Observable<any> = this.retrieveTranslations(lang);\r\n\r\n    if (typeof pending !== \"undefined\") {\r\n      // on init set the currentLang immediately\r\n      if (!this.currentLang) {\r\n        this.currentLang = lang;\r\n      }\r\n\r\n      pending.pipe(take(1))\r\n        .subscribe((res: any) => {\r\n          this.changeLang(lang);\r\n        });\r\n\r\n      return pending;\r\n    } else { // we have this language, return an Observable\r\n      this.changeLang(lang);\r\n\r\n      return of(this.translations[lang]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the given translations\r\n   */\r\n  private retrieveTranslations(lang: string): Observable<any> {\r\n    let pending: Observable<any>;\r\n\r\n    // if this language is unavailable or extend is true, ask for it\r\n    if (typeof this.translations[lang] === \"undefined\" || this.extend) {\r\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\r\n      pending = this._translationRequests[lang];\r\n    }\r\n\r\n    return pending;\r\n  }\r\n\r\n  /**\r\n   * Gets an object of translations for a given language with the current loader\r\n   * and passes it through the compiler\r\n   */\r\n  public getTranslation(lang: string): Observable<any> {\r\n    this.pending = true;\r\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(\r\n      shareReplay(1),\r\n      take(1),\r\n    );\r\n\r\n    this.loadingTranslations = loadingTranslations.pipe(\r\n      map((res: Object) => this.compiler.compileTranslations(res, lang)),\r\n      shareReplay(1),\r\n      take(1),\r\n    );\r\n\r\n    this.loadingTranslations\r\n      .subscribe({\r\n        next: (res: Object) => {\r\n          this.translations[lang] = this.extend && this.translations[lang] ? { ...res, ...this.translations[lang] } : res;\r\n          this.updateLangs();\r\n          this.pending = false;\r\n        },\r\n        error: (err: any) => {\r\n          this.pending = false;\r\n        }\r\n      });\r\n\r\n    return loadingTranslations;\r\n  }\r\n\r\n  /**\r\n   * Manually sets an object of translations for a given language\r\n   * after passing it through the compiler\r\n   */\r\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\r\n    translations = this.compiler.compileTranslations(translations, lang);\r\n    if ((shouldMerge || this.extend) && this.translations[lang]) {\r\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\r\n    } else {\r\n      this.translations[lang] = translations;\r\n    }\r\n    this.updateLangs();\r\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\r\n  }\r\n\r\n  /**\r\n   * Returns an array of currently available langs\r\n   */\r\n  public getLangs(): Array<string> {\r\n    return this.langs;\r\n  }\r\n\r\n  /**\r\n   * Add available langs\r\n   */\r\n  public addLangs(langs: Array<string>): void {\r\n    langs.forEach((lang: string) => {\r\n      if (this.langs.indexOf(lang) === -1) {\r\n        this.langs.push(lang);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the list of available langs\r\n   */\r\n  private updateLangs(): void {\r\n    this.addLangs(Object.keys(this.translations));\r\n  }\r\n\r\n  /**\r\n   * Returns the parsed result of the translations\r\n   */\r\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\r\n\r\n    // TODO: Logging for intregrate a fix in IE10 :(\r\n    console.log('translations recieved', translations);\r\n    console.log('keys recieved', key);\r\n    console.log('interpolateparams', interpolateParams);\r\n\r\n    let res: string | Observable<string>;\r\n\r\n    if (key instanceof Array) {\r\n      let result: any = {},\r\n        observables: boolean = false;\r\n      for (let k of key) {\r\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\r\n        if (isObservable(result[k])) {\r\n          observables = true;\r\n        }\r\n      }\r\n      if (observables) {\r\n        const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k] as string));\r\n        return forkJoin(sources).pipe(\r\n          map((arr: Array<string>) => {\r\n            let obj: any = {};\r\n            arr.forEach((value: string, index: number) => {\r\n              obj[key[index]] = value;\r\n            });\r\n            return obj;\r\n          })\r\n        );\r\n      }\r\n      return result;\r\n    }\r\n\r\n    if (translations) {\r\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\r\n    }\r\n\r\n    if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\r\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\r\n    }\r\n\r\n    if (typeof res === \"undefined\") {\r\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\r\n      if (typeof interpolateParams !== 'undefined') {\r\n        params.interpolateParams = interpolateParams;\r\n      }\r\n      res = this.missingTranslationHandler.handle(params);\r\n    }\r\n\r\n    return typeof res !== \"undefined\" ? res : key;\r\n  }\r\n\r\n  /**\r\n   * Gets the translated value of a key (or an array of keys)\r\n   * @returns the translated key, or an object of translated keys\r\n   */\r\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\r\n    if (!isDefined(key) || !key.length) {\r\n      throw new Error(`Parameter \"key\" required`);\r\n    }\r\n    // check if we are loading a new translation to use\r\n    if (this.pending) {\r\n      return this.loadingTranslations.pipe(\r\n        concatMap((res: any) => {\r\n          res = this.getParsedResult(res, key, interpolateParams);\r\n          return isObservable(res) ? res : of(res);\r\n        }),\r\n      );\r\n    } else {\r\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n      return isObservable(res) ? res : of(res);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of translated values of a key (or an array of keys) which updates\r\n   * whenever the translation changes.\r\n   * @returns A stream of the translated key, or an object of translated keys\r\n   */\r\n  public getStreamOnTranslationChange(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\r\n    if (!isDefined(key) || !key.length) {\r\n      throw new Error(`Parameter \"key\" required`);\r\n    }\r\n\r\n    return concat(\r\n      defer(() => this.get(key, interpolateParams)),\r\n      this.onTranslationChange.pipe(\r\n        switchMap((event: TranslationChangeEvent) => {\r\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n          if (typeof res.subscribe === 'function') {\r\n            return res;\r\n          } else {\r\n            return of(res);\r\n          }\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of translated values of a key (or an array of keys) which updates\r\n   * whenever the language changes.\r\n   * @returns A stream of the translated key, or an object of translated keys\r\n   */\r\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\r\n    if (!isDefined(key) || !key.length) {\r\n      throw new Error(`Parameter \"key\" required`);\r\n    }\r\n\r\n    return concat(\r\n      defer(() => this.get(key, interpolateParams)),\r\n      this.onLangChange.pipe(\r\n        switchMap((event: LangChangeEvent) => {\r\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n          return isObservable(res) ? res : of(res);\r\n        })\r\n      ));\r\n  }\r\n\r\n  /**\r\n   * Returns a translation instantly from the internal state of loaded translation.\r\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\r\n   */\r\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\r\n    if (!isDefined(key) || !key.length) {\r\n      throw new Error(`Parameter \"key\" required`);\r\n    }\r\n\r\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n    if (isObservable(res)) {\r\n      if (key instanceof Array) {\r\n        let obj: any = {};\r\n        key.forEach((value: string, index: number) => {\r\n          obj[key[index]] = key[index];\r\n        });\r\n        return obj;\r\n      }\r\n      return key;\r\n    } else {\r\n      return res;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the translated value of a key, after compiling it\r\n   */\r\n  public set(key: string, value: string, lang: string = this.currentLang): void {\r\n    this.translations[lang][key] = this.compiler.compile(value, lang);\r\n    this.updateLangs();\r\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\r\n  }\r\n\r\n  /**\r\n   * Changes the current lang\r\n   */\r\n  private changeLang(lang: string): void {\r\n    this.currentLang = lang;\r\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\r\n\r\n    // if there is no default lang, use the one that we just set\r\n    if (this.defaultLang == null) {\r\n      this.changeDefaultLang(lang);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Changes the default lang\r\n   */\r\n  private changeDefaultLang(lang: string): void {\r\n    this.defaultLang = lang;\r\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\r\n  }\r\n\r\n  /**\r\n   * Allows to reload the lang file from the file\r\n   */\r\n  public reloadLang(lang: string): Observable<any> {\r\n    this.resetLang(lang);\r\n    return this.getTranslation(lang);\r\n  }\r\n\r\n  /**\r\n   * Deletes inner translation\r\n   */\r\n  public resetLang(lang: string): void {\r\n    this._translationRequests[lang] = undefined;\r\n    this.translations[lang] = undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns the language code name from the browser, e.g. \"de\"\r\n   */\r\n  public getBrowserLang(): string {\r\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\r\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n\r\n    if (typeof browserLang === 'undefined') {\r\n      return undefined\r\n    }\r\n\r\n    if (browserLang.indexOf('-') !== -1) {\r\n      browserLang = browserLang.split('-')[0];\r\n    }\r\n\r\n    if (browserLang.indexOf('_') !== -1) {\r\n      browserLang = browserLang.split('_')[0];\r\n    }\r\n\r\n    return browserLang;\r\n  }\r\n\r\n  /**\r\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\r\n   */\r\n  public getBrowserCultureLang(): string {\r\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\r\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n\r\n    return browserCultureLang;\r\n  }\r\n}\r\n","import {AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy} from '@angular/core';\r\nimport {Subscription, isObservable} from 'rxjs';\r\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\r\nimport {equals, isDefined} from './util';\r\n\r\n@Directive({\r\n  selector: '[translate],[ngx-translate]'\r\n})\r\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\r\n  key: string;\r\n  lastParams: any;\r\n  currentParams: any;\r\n  onLangChangeSub: Subscription;\r\n  onDefaultLangChangeSub: Subscription;\r\n  onTranslationChangeSub: Subscription;\r\n\r\n  @Input() set translate(key: string) {\r\n    if (key) {\r\n      this.key = key;\r\n      this.checkNodes();\r\n    }\r\n  }\r\n\r\n  @Input() set translateParams(params: any) {\r\n    if (!equals(this.currentParams, params)) {\r\n      this.currentParams = params;\r\n      this.checkNodes(true);\r\n    }\r\n  }\r\n\r\n  constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\r\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\r\n    if (!this.onTranslationChangeSub) {\r\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\r\n        if (event.lang === this.translateService.currentLang) {\r\n          this.checkNodes(true, event.translations);\r\n        }\r\n      });\r\n    }\r\n\r\n    // subscribe to onLangChange event, in case the language changes\r\n    if (!this.onLangChangeSub) {\r\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\r\n        this.checkNodes(true, event.translations);\r\n      });\r\n    }\r\n\r\n    // subscribe to onDefaultLangChange event, in case the default language changes\r\n    if (!this.onDefaultLangChangeSub) {\r\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\r\n        this.checkNodes(true);\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    this.checkNodes();\r\n  }\r\n\r\n  checkNodes(forceUpdate = false, translations?: any) {\r\n    let nodes: NodeList = this.element.nativeElement.childNodes;\r\n    // if the element is empty\r\n    if (!nodes.length) {\r\n      // we add the key as content\r\n      this.setContent(this.element.nativeElement, this.key);\r\n      nodes = this.element.nativeElement.childNodes;\r\n    }\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      let node: any = nodes[i];\r\n      if (node.nodeType === 3) { // node type 3 is a text node\r\n        let key: string;\r\n        if (forceUpdate) {\r\n          node.lastKey = null;\r\n        }\r\n        if(isDefined(node.lookupKey)) {\r\n          key = node.lookupKey;\r\n        } else if (this.key) {\r\n          key = this.key;\r\n        } else {\r\n          let content = this.getContent(node);\r\n          let trimmedContent = content.trim();\r\n          if (trimmedContent.length) {\r\n            node.lookupKey = trimmedContent;\r\n            // we want to use the content as a key, not the translation value\r\n            if (content !== node.currentValue) {\r\n              key = trimmedContent;\r\n              // the content was changed from the user, we'll use it as a reference if needed\r\n              node.originalContent = content || node.originalContent;\r\n            } else if (node.originalContent) { // the content seems ok, but the lang has changed\r\n              // the current content is the translation, not the key, use the last real content as key\r\n              key = node.originalContent.trim();\r\n            } else if (content !== node.currentValue) {\r\n              // we want to use the content as a key, not the translation value\r\n              key = trimmedContent;\r\n              // the content was changed from the user, we'll use it as a reference if needed\r\n              node.originalContent = content || node.originalContent;\r\n            }\r\n          }\r\n        }\r\n        this.updateValue(key, node, translations);\r\n      }\r\n    }\r\n  }\r\n\r\n  updateValue(key: string, node: any, translations: any) {\r\n    if (key) {\r\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\r\n        return;\r\n      }\r\n\r\n      this.lastParams = this.currentParams;\r\n\r\n      let onTranslation = (res: string) => {\r\n        if (res !== key) {\r\n          node.lastKey = key;\r\n        }\r\n        if (!node.originalContent) {\r\n          node.originalContent = this.getContent(node);\r\n        }\r\n        node.currentValue = isDefined(res) ? res : (node.originalContent || key);\r\n        // we replace in the original content to preserve spaces that we might have trimmed\r\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\r\n        this._ref.markForCheck();\r\n      };\r\n\r\n      if (isDefined(translations)) {\r\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\r\n        if (isObservable(res)) {\r\n          res.subscribe(onTranslation);\r\n        } else {\r\n          onTranslation(res);\r\n        }\r\n      } else {\r\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\r\n      }\r\n    }\r\n  }\r\n\r\n  getContent(node: any): string {\r\n    return isDefined(node.textContent) ? node.textContent : node.data;\r\n  }\r\n\r\n  setContent(node: any, content: string): void {\r\n    if (isDefined(node.textContent)) {\r\n      node.textContent = content;\r\n    } else {\r\n      node.data = content;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.onLangChangeSub) {\r\n      this.onLangChangeSub.unsubscribe();\r\n    }\r\n\r\n    if (this.onDefaultLangChangeSub) {\r\n      this.onDefaultLangChangeSub.unsubscribe();\r\n    }\r\n\r\n    if (this.onTranslationChangeSub) {\r\n      this.onTranslationChangeSub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';\r\nimport {isObservable} from 'rxjs';\r\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\r\nimport {equals, isDefined} from './util';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Injectable()\r\n@Pipe({\r\n  name: 'translate',\r\n  pure: false // required to update the value when the promise is resolved\r\n})\r\nexport class TranslatePipe implements PipeTransform, OnDestroy {\r\n  value: string = '';\r\n  lastKey: string;\r\n  lastParams: any[];\r\n  onTranslationChange: Subscription;\r\n  onLangChange: Subscription;\r\n  onDefaultLangChange: Subscription;\r\n\r\n  constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\r\n  }\r\n\r\n  updateValue(key: string, interpolateParams?: Object, translations?: any): void {\r\n    let onTranslation = (res: string) => {\r\n      this.value = res !== undefined ? res : key;\r\n      this.lastKey = key;\r\n      this._ref.markForCheck();\r\n    };\r\n    if (translations) {\r\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\r\n      if (isObservable(res.subscribe)) {\r\n        res.subscribe(onTranslation);\r\n      } else {\r\n        onTranslation(res);\r\n      }\r\n    }\r\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\r\n  }\r\n\r\n  transform(query: string, ...args: any[]): any {\r\n    if (!query || !query.length) {\r\n      return query;\r\n    }\r\n\r\n    // if we ask another time for the same key, return the last value\r\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\r\n      return this.value;\r\n    }\r\n\r\n    let interpolateParams: Object;\r\n    if (isDefined(args[0]) && args.length) {\r\n      if (typeof args[0] === 'string' && args[0].length) {\r\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\r\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\r\n        let validArgs: string = args[0]\r\n          .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\r\n          .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\r\n        try {\r\n          interpolateParams = JSON.parse(validArgs);\r\n        } catch (e) {\r\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\r\n        }\r\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\r\n        interpolateParams = args[0];\r\n      }\r\n    }\r\n\r\n    // store the query, in case it changes\r\n    this.lastKey = query;\r\n\r\n    // store the params, in case they change\r\n    this.lastParams = args;\r\n\r\n    // set the value\r\n    this.updateValue(query, interpolateParams);\r\n\r\n    // if there is a subscription to onLangChange, clean it\r\n    this._dispose();\r\n\r\n    // subscribe to onTranslationChange event, in case the translations change\r\n    if (!this.onTranslationChange) {\r\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\r\n        if (this.lastKey && event.lang === this.translate.currentLang) {\r\n          this.lastKey = null;\r\n          this.updateValue(query, interpolateParams, event.translations);\r\n        }\r\n      });\r\n    }\r\n\r\n    // subscribe to onLangChange event, in case the language changes\r\n    if (!this.onLangChange) {\r\n      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\r\n        if (this.lastKey) {\r\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n          this.updateValue(query, interpolateParams, event.translations);\r\n        }\r\n      });\r\n    }\r\n\r\n    // subscribe to onDefaultLangChange event, in case the default language changes\r\n    if (!this.onDefaultLangChange) {\r\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\r\n        if (this.lastKey) {\r\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n          this.updateValue(query, interpolateParams);\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Clean any existing subscription to change events\r\n   */\r\n  private _dispose(): void {\r\n    if (typeof this.onTranslationChange !== 'undefined') {\r\n      this.onTranslationChange.unsubscribe();\r\n      this.onTranslationChange = undefined;\r\n    }\r\n    if (typeof this.onLangChange !== 'undefined') {\r\n      this.onLangChange.unsubscribe();\r\n      this.onLangChange = undefined;\r\n    }\r\n    if (typeof this.onDefaultLangChange !== 'undefined') {\r\n      this.onDefaultLangChange.unsubscribe();\r\n      this.onDefaultLangChange = undefined;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._dispose();\r\n  }\r\n}\r\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\r\nimport {TranslateLoader, TranslateFakeLoader} from \"./lib/translate.loader\";\r\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./lib/missing-translation-handler\";\r\nimport {TranslateParser, TranslateDefaultParser} from \"./lib/translate.parser\";\r\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./lib/translate.compiler\";\r\nimport {TranslateDirective} from \"./lib/translate.directive\";\r\nimport {TranslatePipe} from \"./lib/translate.pipe\";\r\nimport {TranslateStore} from \"./lib/translate.store\";\r\nimport {USE_DEFAULT_LANG, DEFAULT_LANGUAGE, USE_STORE, TranslateService, USE_EXTEND} from \"./lib/translate.service\";\r\n\r\nexport * from \"./lib/translate.loader\";\r\nexport * from \"./lib/translate.service\";\r\nexport * from \"./lib/missing-translation-handler\";\r\nexport * from \"./lib/translate.parser\";\r\nexport * from \"./lib/translate.compiler\";\r\nexport * from \"./lib/translate.directive\";\r\nexport * from \"./lib/translate.pipe\";\r\nexport * from \"./lib/translate.store\";\r\n\r\nexport interface TranslateModuleConfig {\r\n  loader?: Provider;\r\n  compiler?: Provider;\r\n  parser?: Provider;\r\n  missingTranslationHandler?: Provider;\r\n  // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\r\n  isolate?: boolean;\r\n  // extends translations for a given language instead of ignoring them if present\r\n  extend?: boolean;\r\n  useDefaultLang?: boolean;\r\n  defaultLanguage?: string;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TranslatePipe,\r\n    TranslateDirective\r\n  ],\r\n  exports: [\r\n    TranslatePipe,\r\n    TranslateDirective\r\n  ]\r\n})\r\nexport class TranslateModule {\r\n  /**\r\n   * Use this method in your root module to provide the TranslateService\r\n   */\r\n  static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders<TranslateModule> {\r\n    return {\r\n      ngModule: TranslateModule,\r\n      providers: [\r\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\r\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\r\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\r\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\r\n        TranslateStore,\r\n        {provide: USE_STORE, useValue: config.isolate},\r\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\r\n        {provide: USE_EXTEND, useValue: config.extend},\r\n        {provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage},\r\n        TranslateService\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Use this method in your other (non root) modules to import the directive/pipe\r\n   */\r\n  static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders<TranslateModule> {\r\n    return {\r\n      ngModule: TranslateModule,\r\n      providers: [\r\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\r\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\r\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\r\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\r\n        {provide: USE_STORE, useValue: config.isolate},\r\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\r\n        {provide: USE_EXTEND, useValue: config.extend},\r\n        {provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage},\r\n        TranslateService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}