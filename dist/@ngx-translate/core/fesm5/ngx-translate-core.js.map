{"version":3,"file":"ngx-translate-core.js","sources":["ng://@ngx-translate/core/lib/translate.loader.ts","ng://@ngx-translate/core/lib/missing-translation-handler.ts","ng://@ngx-translate/core/lib/util.ts","ng://@ngx-translate/core/lib/translate.parser.ts","ng://@ngx-translate/core/lib/translate.compiler.ts","ng://@ngx-translate/core/lib/translate.store.ts","ng://@ngx-translate/core/lib/translate.service.ts","ng://@ngx-translate/core/lib/translate.directive.ts","ng://@ngx-translate/core/lib/translate.pipe.ts","ng://@ngx-translate/core/public_api.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Observable, of} from \"rxjs\";\r\n\r\nexport abstract class TranslateLoader {\r\n  abstract getTranslation(lang: string): Observable<any>;\r\n}\r\n\r\n/**\r\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\r\n */\r\n@Injectable()\r\nexport class TranslateFakeLoader extends TranslateLoader {\r\n  getTranslation(lang: string): Observable<any> {\r\n    return of({});\r\n  }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {TranslateService} from \"./translate.service\";\r\n\r\nexport interface MissingTranslationHandlerParams {\r\n  /**\r\n   * the key that's missing in translation files\r\n   */\r\n  key: string;\r\n\r\n  /**\r\n   * an instance of the service that was unable to translate the key.\r\n   */\r\n  translateService: TranslateService;\r\n\r\n  /**\r\n   * interpolation params that were passed along for translating the given key.\r\n   */\r\n  interpolateParams?: Object;\r\n}\r\n\r\nexport abstract class MissingTranslationHandler {\r\n  /**\r\n   * A function that handles missing translations.\r\n   *\r\n   * @param params context for resolving a missing translation\r\n   * @returns a value or an observable\r\n   * If it returns a value, then this value is used.\r\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\r\n   * If it doesn't return then the key will be used as a value\r\n   */\r\n  abstract handle(params: MissingTranslationHandlerParams): any;\r\n}\r\n\r\n/**\r\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\r\n */\r\n@Injectable()\r\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\r\n  handle(params: MissingTranslationHandlerParams): string {\r\n    return params.key;\r\n  }\r\n}\r\n","/* tslint:disable */\r\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\r\nexport function equals(o1: any, o2: any): boolean {\r\n  if (o1 === o2) return true;\r\n  if (o1 === null || o2 === null) return false;\r\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\r\n  let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\r\n  if (t1 == t2 && t1 == 'object') {\r\n    if (Array.isArray(o1)) {\r\n      if (!Array.isArray(o2)) return false;\r\n      if ((length = o1.length) == o2.length) {\r\n        for (key = 0; key < length; key++) {\r\n          if (!equals(o1[key], o2[key])) return false;\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      if (Array.isArray(o2)) {\r\n        return false;\r\n      }\r\n      keySet = Object.create(null);\r\n      for (key in o1) {\r\n        if (!equals(o1[key], o2[key])) {\r\n          return false;\r\n        }\r\n        keySet[key] = true;\r\n      }\r\n      for (key in o2) {\r\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n/* tslint:enable */\r\n\r\nexport function isDefined(value: any): boolean {\r\n  return typeof value !== 'undefined' && value !== null;\r\n}\r\n\r\nexport function isObject(item: any): boolean {\r\n  return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target: any, source: any): any {\r\n  let output = Object.assign({}, target);\r\n  if (isObject(target) && isObject(source)) {\r\n    Object.keys(source).forEach((key: any) => {\r\n      if (isObject(source[key])) {\r\n        if (!(key in target)) {\r\n          Object.assign(output, {[key]: source[key]});\r\n        } else {\r\n          output[key] = mergeDeep(target[key], source[key]);\r\n        }\r\n      } else {\r\n        Object.assign(output, {[key]: source[key]});\r\n      }\r\n    });\r\n  }\r\n  return output;\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {isDefined} from \"./util\";\r\n\r\nexport abstract class TranslateParser {\r\n  /**\r\n   * Interpolates a string to replace parameters\r\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\r\n   * @param expr\r\n   * @param params\r\n   */\r\n  abstract interpolate(expr: string | Function, params?: any): string;\r\n\r\n  /**\r\n   * Gets a value from an object by composed key\r\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\r\n   * @param target\r\n   * @param key\r\n   */\r\n  abstract getValue(target: any, key: string): any\r\n}\r\n\r\n@Injectable()\r\nexport class TranslateDefaultParser extends TranslateParser {\r\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\r\n\r\n  public interpolate(expr: string | Function, params?: any): string {\r\n    let result: string;\r\n\r\n    if (typeof expr === 'string') {\r\n      result = this.interpolateString(expr, params);\r\n    } else if (typeof expr === 'function') {\r\n      result = this.interpolateFunction(expr, params);\r\n    } else {\r\n      // this should not happen, but an unrelated TranslateService test depends on it\r\n      result = expr as string;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  getValue(target: any, key: string): any {\r\n    let keys = typeof key === 'string' ? key.split('.') : [key];\r\n    key = '';\r\n    do {\r\n      key += keys.shift();\r\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\r\n        target = target[key];\r\n        key = '';\r\n      } else if (!keys.length) {\r\n        target = undefined;\r\n      } else {\r\n        key += '.';\r\n      }\r\n    } while (keys.length);\r\n\r\n    return target;\r\n  }\r\n\r\n  private interpolateFunction(fn: Function, params?: any) {\r\n    return fn(params);\r\n  }\r\n\r\n  private interpolateString(expr: string, params?: any) {\r\n    if (!params) {\r\n      return expr;\r\n    }\r\n\r\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\r\n      let r = this.getValue(params, b);\r\n      return isDefined(r) ? r : substring;\r\n    });\r\n  }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\n\r\nexport abstract class TranslateCompiler {\r\n  abstract compile(value: string, lang: string): string | Function;\r\n\r\n  abstract compileTranslations(translations: any, lang: string): any;\r\n}\r\n\r\n/**\r\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\r\n */\r\n@Injectable()\r\nexport class TranslateFakeCompiler extends TranslateCompiler {\r\n  compile(value: string, lang: string): string | Function {\r\n    return value;\r\n  }\r\n\r\n  compileTranslations(translations: any, lang: string): any {\r\n    return translations;\r\n  }\r\n}\r\n","import {EventEmitter} from \"@angular/core\";\r\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\r\n\r\nexport class TranslateStore {\r\n  /**\r\n   * The default lang to fallback when translations are missing on the current lang\r\n   */\r\n  public defaultLang: string;\r\n\r\n  /**\r\n   * The lang currently used\r\n   */\r\n  public currentLang: string = this.defaultLang;\r\n\r\n  /**\r\n   * a list of translations per lang\r\n   */\r\n  public translations: any = {};\r\n\r\n  /**\r\n   * an array of langs\r\n   */\r\n  public langs: Array<string> = [];\r\n\r\n  /**\r\n   * An EventEmitter to listen to translation change events\r\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\r\n\r\n  /**\r\n   * An EventEmitter to listen to lang change events\r\n   * onLangChange.subscribe((params: LangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\r\n\r\n  /**\r\n   * An EventEmitter to listen to default lang change events\r\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\r\n}\r\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\r\nimport {concat, forkJoin, isObservable, Observable, of, defer} from \"rxjs\";\r\nimport {concatMap, map, shareReplay, switchMap, take} from \"rxjs/operators\";\r\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\r\nimport {TranslateCompiler} from \"./translate.compiler\";\r\nimport {TranslateLoader} from \"./translate.loader\";\r\nimport {TranslateParser} from \"./translate.parser\";\r\n\r\nimport {TranslateStore} from \"./translate.store\";\r\nimport {isDefined, mergeDeep} from \"./util\";\r\n\r\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\r\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\r\nexport const DEFAULT_LANGUAGE = new InjectionToken<string>('DEFAULT_LANGUAGE');\r\nexport const USE_EXTEND = new InjectionToken<string>('USE_EXTEND');\r\n\r\nexport interface TranslationChangeEvent {\r\n  translations: any;\r\n  lang: string;\r\n}\r\n\r\nexport interface LangChangeEvent {\r\n  lang: string;\r\n  translations: any;\r\n}\r\n\r\nexport interface DefaultLangChangeEvent {\r\n  lang: string;\r\n  translations: any;\r\n}\r\n\r\ndeclare interface Window {\r\n  navigator: any;\r\n}\r\n\r\ndeclare const window: Window;\r\n\r\n@Injectable()\r\nexport class TranslateService {\r\n  private loadingTranslations: Observable<any>;\r\n  private pending: boolean = false;\r\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\r\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\r\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\r\n  private _defaultLang: string;\r\n  private _currentLang: string;\r\n  private _langs: Array<string> = [];\r\n  private _translations: any = {};\r\n  private _translationRequests: any = {};\r\n\r\n  /**\r\n   * An EventEmitter to listen to translation change events\r\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\r\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\r\n  }\r\n\r\n  /**\r\n   * An EventEmitter to listen to lang change events\r\n   * onLangChange.subscribe((params: LangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  get onLangChange(): EventEmitter<LangChangeEvent> {\r\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\r\n  }\r\n\r\n  /**\r\n   * An EventEmitter to listen to default lang change events\r\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\r\n  get onDefaultLangChange() {\r\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\r\n  }\r\n\r\n  /**\r\n   * The default lang to fallback when translations are missing on the current lang\r\n   */\r\n  get defaultLang(): string {\r\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\r\n  }\r\n\r\n  set defaultLang(defaultLang: string) {\r\n    if (this.isolate) {\r\n      this._defaultLang = defaultLang;\r\n    } else {\r\n      this.store.defaultLang = defaultLang;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The lang currently used\r\n   */\r\n  get currentLang(): string {\r\n    return this.isolate ? this._currentLang : this.store.currentLang;\r\n  }\r\n\r\n  set currentLang(currentLang: string) {\r\n    if (this.isolate) {\r\n      this._currentLang = currentLang;\r\n    } else {\r\n      this.store.currentLang = currentLang;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * an array of langs\r\n   */\r\n  get langs(): string[] {\r\n    return this.isolate ? this._langs : this.store.langs;\r\n  }\r\n\r\n  set langs(langs: string[]) {\r\n    if (this.isolate) {\r\n      this._langs = langs;\r\n    } else {\r\n      this.store.langs = langs;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * a list of translations per lang\r\n   */\r\n  get translations(): any {\r\n    return this.isolate ? this._translations : this.store.translations;\r\n  }\r\n\r\n  set translations(translations: any) {\r\n    if (this.isolate) {\r\n      this._translations = translations;\r\n    } else {\r\n      this.store.translations = translations;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param store an instance of the store (that is supposed to be unique)\r\n   * @param currentLoader An instance of the loader currently used\r\n   * @param compiler An instance of the compiler currently used\r\n   * @param parser An instance of the parser currently used\r\n   * @param missingTranslationHandler A handler for missing translations.\r\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\r\n   * @param isolate whether this service should use the store or not\r\n   * @param extend To make a child module extend (and use) translations from parent modules.\r\n   * @param defaultLanguage Set the default language using configuration\r\n   */\r\n  constructor(public store: TranslateStore,\r\n              public currentLoader: TranslateLoader,\r\n              public compiler: TranslateCompiler,\r\n              public parser: TranslateParser,\r\n              public missingTranslationHandler: MissingTranslationHandler,\r\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\r\n              @Inject(USE_STORE) private isolate: boolean = false,\r\n              @Inject(USE_EXTEND) private extend: boolean = false,\r\n              @Inject(DEFAULT_LANGUAGE) defaultLanguage: string) {\r\n    /** set the default language from configuration */\r\n    if (defaultLanguage) {\r\n      this.setDefaultLang(defaultLanguage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the default language to use as a fallback\r\n   */\r\n  public setDefaultLang(lang: string): void {\r\n    if (lang === this.defaultLang) {\r\n      return;\r\n    }\r\n\r\n    let pending: Observable<any> = this.retrieveTranslations(lang);\r\n\r\n    if (typeof pending !== \"undefined\") {\r\n      // on init set the defaultLang immediately\r\n      if (this.defaultLang == null) {\r\n        this.defaultLang = lang;\r\n      }\r\n\r\n      pending.pipe(take(1))\r\n        .subscribe((res: any) => {\r\n          this.changeDefaultLang(lang);\r\n        });\r\n    } else { // we already have this language\r\n      this.changeDefaultLang(lang);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the default language used\r\n   */\r\n  public getDefaultLang(): string {\r\n    return this.defaultLang;\r\n  }\r\n\r\n  /**\r\n   * Changes the lang currently used\r\n   */\r\n  public use(lang: string): Observable<any> {\r\n    // don't change the language if the language given is already selected\r\n    if (lang === this.currentLang) {\r\n      return of(this.translations[lang]);\r\n    }\r\n\r\n    let pending: Observable<any> = this.retrieveTranslations(lang);\r\n\r\n    if (typeof pending !== \"undefined\") {\r\n      // on init set the currentLang immediately\r\n      if (!this.currentLang) {\r\n        this.currentLang = lang;\r\n      }\r\n\r\n      pending.pipe(take(1))\r\n        .subscribe((res: any) => {\r\n          this.changeLang(lang);\r\n        });\r\n\r\n      return pending;\r\n    } else { // we have this language, return an Observable\r\n      this.changeLang(lang);\r\n\r\n      return of(this.translations[lang]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the given translations\r\n   */\r\n  private retrieveTranslations(lang: string): Observable<any> {\r\n    let pending: Observable<any>;\r\n\r\n    // if this language is unavailable or extend is true, ask for it\r\n    if (typeof this.translations[lang] === \"undefined\" || this.extend) {\r\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\r\n      pending = this._translationRequests[lang];\r\n    }\r\n\r\n    return pending;\r\n  }\r\n\r\n  /**\r\n   * Gets an object of translations for a given language with the current loader\r\n   * and passes it through the compiler\r\n   */\r\n  public getTranslation(lang: string): Observable<any> {\r\n    this.pending = true;\r\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(\r\n      shareReplay(1),\r\n      take(1),\r\n    );\r\n\r\n    this.loadingTranslations = loadingTranslations.pipe(\r\n      map((res: Object) => this.compiler.compileTranslations(res, lang)),\r\n      shareReplay(1),\r\n      take(1),\r\n    );\r\n\r\n    this.loadingTranslations\r\n      .subscribe({\r\n        next: (res: Object) => {\r\n          this.translations[lang] = this.extend && this.translations[lang] ? { ...res, ...this.translations[lang] } : res;\r\n          this.updateLangs();\r\n          this.pending = false;\r\n        },\r\n        error: (err: any) => {\r\n          this.pending = false;\r\n        }\r\n      });\r\n\r\n    return loadingTranslations;\r\n  }\r\n\r\n  /**\r\n   * Manually sets an object of translations for a given language\r\n   * after passing it through the compiler\r\n   */\r\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\r\n    translations = this.compiler.compileTranslations(translations, lang);\r\n    if ((shouldMerge || this.extend) && this.translations[lang]) {\r\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\r\n    } else {\r\n      this.translations[lang] = translations;\r\n    }\r\n    this.updateLangs();\r\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\r\n  }\r\n\r\n  /**\r\n   * Returns an array of currently available langs\r\n   */\r\n  public getLangs(): Array<string> {\r\n    return this.langs;\r\n  }\r\n\r\n  /**\r\n   * Add available langs\r\n   */\r\n  public addLangs(langs: Array<string>): void {\r\n    langs.forEach((lang: string) => {\r\n      if (this.langs.indexOf(lang) === -1) {\r\n        this.langs.push(lang);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the list of available langs\r\n   */\r\n  private updateLangs(): void {\r\n    this.addLangs(Object.keys(this.translations));\r\n  }\r\n\r\n  /**\r\n   * Returns the parsed result of the translations\r\n   */\r\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\r\n\r\n    // TODO: Logging for intregrate a fix in IE10 :(\r\n    console.log('translations recieved', translations);\r\n    console.log('keys recieved', key);\r\n    console.log('interpolateparams', interpolateParams);\r\n\r\n    let res: string | Observable<string>;\r\n\r\n    if (key instanceof Array) {\r\n      let result: any = {},\r\n        observables: boolean = false;\r\n      for (let k of key) {\r\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\r\n        if (isObservable(result[k])) {\r\n          observables = true;\r\n        }\r\n      }\r\n      if (observables) {\r\n        const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k] as string));\r\n        return forkJoin(sources).pipe(\r\n          map((arr: Array<string>) => {\r\n            let obj: any = {};\r\n            arr.forEach((value: string, index: number) => {\r\n              obj[key[index]] = value;\r\n            });\r\n            return obj;\r\n          })\r\n        );\r\n      }\r\n      return result;\r\n    }\r\n\r\n    if (translations) {\r\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\r\n    }\r\n\r\n    if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\r\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\r\n    }\r\n\r\n    if (typeof res === \"undefined\") {\r\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\r\n      if (typeof interpolateParams !== 'undefined') {\r\n        params.interpolateParams = interpolateParams;\r\n      }\r\n      res = this.missingTranslationHandler.handle(params);\r\n    }\r\n\r\n    return typeof res !== \"undefined\" ? res : key;\r\n  }\r\n\r\n  /**\r\n   * Gets the translated value of a key (or an array of keys)\r\n   * @returns the translated key, or an object of translated keys\r\n   */\r\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\r\n    if (!isDefined(key) || !key.length) {\r\n      throw new Error(`Parameter \"key\" required`);\r\n    }\r\n    // check if we are loading a new translation to use\r\n    if (this.pending) {\r\n      return this.loadingTranslations.pipe(\r\n        concatMap((res: any) => {\r\n          res = this.getParsedResult(res, key, interpolateParams);\r\n          return isObservable(res) ? res : of(res);\r\n        }),\r\n      );\r\n    } else {\r\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n      return isObservable(res) ? res : of(res);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of translated values of a key (or an array of keys) which updates\r\n   * whenever the translation changes.\r\n   * @returns A stream of the translated key, or an object of translated keys\r\n   */\r\n  public getStreamOnTranslationChange(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\r\n    if (!isDefined(key) || !key.length) {\r\n      throw new Error(`Parameter \"key\" required`);\r\n    }\r\n\r\n    return concat(\r\n      defer(() => this.get(key, interpolateParams)),\r\n      this.onTranslationChange.pipe(\r\n        switchMap((event: TranslationChangeEvent) => {\r\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n          if (typeof res.subscribe === 'function') {\r\n            return res;\r\n          } else {\r\n            return of(res);\r\n          }\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of translated values of a key (or an array of keys) which updates\r\n   * whenever the language changes.\r\n   * @returns A stream of the translated key, or an object of translated keys\r\n   */\r\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\r\n    if (!isDefined(key) || !key.length) {\r\n      throw new Error(`Parameter \"key\" required`);\r\n    }\r\n\r\n    return concat(\r\n      defer(() => this.get(key, interpolateParams)),\r\n      this.onLangChange.pipe(\r\n        switchMap((event: LangChangeEvent) => {\r\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n          return isObservable(res) ? res : of(res);\r\n        })\r\n      ));\r\n  }\r\n\r\n  /**\r\n   * Returns a translation instantly from the internal state of loaded translation.\r\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\r\n   */\r\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\r\n    if (!isDefined(key) || !key.length) {\r\n      throw new Error(`Parameter \"key\" required`);\r\n    }\r\n\r\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n    if (isObservable(res)) {\r\n      if (key instanceof Array) {\r\n        let obj: any = {};\r\n        key.forEach((value: string, index: number) => {\r\n          obj[key[index]] = key[index];\r\n        });\r\n        return obj;\r\n      }\r\n      return key;\r\n    } else {\r\n      return res;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the translated value of a key, after compiling it\r\n   */\r\n  public set(key: string, value: string, lang: string = this.currentLang): void {\r\n    this.translations[lang][key] = this.compiler.compile(value, lang);\r\n    this.updateLangs();\r\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\r\n  }\r\n\r\n  /**\r\n   * Changes the current lang\r\n   */\r\n  private changeLang(lang: string): void {\r\n    this.currentLang = lang;\r\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\r\n\r\n    // if there is no default lang, use the one that we just set\r\n    if (this.defaultLang == null) {\r\n      this.changeDefaultLang(lang);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Changes the default lang\r\n   */\r\n  private changeDefaultLang(lang: string): void {\r\n    this.defaultLang = lang;\r\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\r\n  }\r\n\r\n  /**\r\n   * Allows to reload the lang file from the file\r\n   */\r\n  public reloadLang(lang: string): Observable<any> {\r\n    this.resetLang(lang);\r\n    return this.getTranslation(lang);\r\n  }\r\n\r\n  /**\r\n   * Deletes inner translation\r\n   */\r\n  public resetLang(lang: string): void {\r\n    this._translationRequests[lang] = undefined;\r\n    this.translations[lang] = undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns the language code name from the browser, e.g. \"de\"\r\n   */\r\n  public getBrowserLang(): string {\r\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\r\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n\r\n    if (typeof browserLang === 'undefined') {\r\n      return undefined\r\n    }\r\n\r\n    if (browserLang.indexOf('-') !== -1) {\r\n      browserLang = browserLang.split('-')[0];\r\n    }\r\n\r\n    if (browserLang.indexOf('_') !== -1) {\r\n      browserLang = browserLang.split('_')[0];\r\n    }\r\n\r\n    return browserLang;\r\n  }\r\n\r\n  /**\r\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\r\n   */\r\n  public getBrowserCultureLang(): string {\r\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\r\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n\r\n    return browserCultureLang;\r\n  }\r\n}\r\n","import {AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy} from '@angular/core';\r\nimport {Subscription, isObservable} from 'rxjs';\r\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\r\nimport {equals, isDefined} from './util';\r\n\r\n@Directive({\r\n  selector: '[translate],[ngx-translate]'\r\n})\r\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\r\n  key: string;\r\n  lastParams: any;\r\n  currentParams: any;\r\n  onLangChangeSub: Subscription;\r\n  onDefaultLangChangeSub: Subscription;\r\n  onTranslationChangeSub: Subscription;\r\n\r\n  @Input() set translate(key: string) {\r\n    if (key) {\r\n      this.key = key;\r\n      this.checkNodes();\r\n    }\r\n  }\r\n\r\n  @Input() set translateParams(params: any) {\r\n    if (!equals(this.currentParams, params)) {\r\n      this.currentParams = params;\r\n      this.checkNodes(true);\r\n    }\r\n  }\r\n\r\n  constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\r\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\r\n    if (!this.onTranslationChangeSub) {\r\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\r\n        if (event.lang === this.translateService.currentLang) {\r\n          this.checkNodes(true, event.translations);\r\n        }\r\n      });\r\n    }\r\n\r\n    // subscribe to onLangChange event, in case the language changes\r\n    if (!this.onLangChangeSub) {\r\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\r\n        this.checkNodes(true, event.translations);\r\n      });\r\n    }\r\n\r\n    // subscribe to onDefaultLangChange event, in case the default language changes\r\n    if (!this.onDefaultLangChangeSub) {\r\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\r\n        this.checkNodes(true);\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    this.checkNodes();\r\n  }\r\n\r\n  checkNodes(forceUpdate = false, translations?: any) {\r\n    let nodes: NodeList = this.element.nativeElement.childNodes;\r\n    // if the element is empty\r\n    if (!nodes.length) {\r\n      // we add the key as content\r\n      this.setContent(this.element.nativeElement, this.key);\r\n      nodes = this.element.nativeElement.childNodes;\r\n    }\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      let node: any = nodes[i];\r\n      if (node.nodeType === 3) { // node type 3 is a text node\r\n        let key: string;\r\n        if (forceUpdate) {\r\n          node.lastKey = null;\r\n        }\r\n        if(isDefined(node.lookupKey)) {\r\n          key = node.lookupKey;\r\n        } else if (this.key) {\r\n          key = this.key;\r\n        } else {\r\n          let content = this.getContent(node);\r\n          let trimmedContent = content.trim();\r\n          if (trimmedContent.length) {\r\n            node.lookupKey = trimmedContent;\r\n            // we want to use the content as a key, not the translation value\r\n            if (content !== node.currentValue) {\r\n              key = trimmedContent;\r\n              // the content was changed from the user, we'll use it as a reference if needed\r\n              node.originalContent = content || node.originalContent;\r\n            } else if (node.originalContent) { // the content seems ok, but the lang has changed\r\n              // the current content is the translation, not the key, use the last real content as key\r\n              key = node.originalContent.trim();\r\n            } else if (content !== node.currentValue) {\r\n              // we want to use the content as a key, not the translation value\r\n              key = trimmedContent;\r\n              // the content was changed from the user, we'll use it as a reference if needed\r\n              node.originalContent = content || node.originalContent;\r\n            }\r\n          }\r\n        }\r\n        this.updateValue(key, node, translations);\r\n      }\r\n    }\r\n  }\r\n\r\n  updateValue(key: string, node: any, translations: any) {\r\n    if (key) {\r\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\r\n        return;\r\n      }\r\n\r\n      this.lastParams = this.currentParams;\r\n\r\n      let onTranslation = (res: string) => {\r\n        if (res !== key) {\r\n          node.lastKey = key;\r\n        }\r\n        if (!node.originalContent) {\r\n          node.originalContent = this.getContent(node);\r\n        }\r\n        node.currentValue = isDefined(res) ? res : (node.originalContent || key);\r\n        // we replace in the original content to preserve spaces that we might have trimmed\r\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\r\n        this._ref.markForCheck();\r\n      };\r\n\r\n      if (isDefined(translations)) {\r\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\r\n        if (isObservable(res)) {\r\n          res.subscribe(onTranslation);\r\n        } else {\r\n          onTranslation(res);\r\n        }\r\n      } else {\r\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\r\n      }\r\n    }\r\n  }\r\n\r\n  getContent(node: any): string {\r\n    return isDefined(node.textContent) ? node.textContent : node.data;\r\n  }\r\n\r\n  setContent(node: any, content: string): void {\r\n    if (isDefined(node.textContent)) {\r\n      node.textContent = content;\r\n    } else {\r\n      node.data = content;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.onLangChangeSub) {\r\n      this.onLangChangeSub.unsubscribe();\r\n    }\r\n\r\n    if (this.onDefaultLangChangeSub) {\r\n      this.onDefaultLangChangeSub.unsubscribe();\r\n    }\r\n\r\n    if (this.onTranslationChangeSub) {\r\n      this.onTranslationChangeSub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';\r\nimport {isObservable} from 'rxjs';\r\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\r\nimport {equals, isDefined} from './util';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Injectable()\r\n@Pipe({\r\n  name: 'translate',\r\n  pure: false // required to update the value when the promise is resolved\r\n})\r\nexport class TranslatePipe implements PipeTransform, OnDestroy {\r\n  value: string = '';\r\n  lastKey: string;\r\n  lastParams: any[];\r\n  onTranslationChange: Subscription;\r\n  onLangChange: Subscription;\r\n  onDefaultLangChange: Subscription;\r\n\r\n  constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\r\n  }\r\n\r\n  updateValue(key: string, interpolateParams?: Object, translations?: any): void {\r\n    let onTranslation = (res: string) => {\r\n      this.value = res !== undefined ? res : key;\r\n      this.lastKey = key;\r\n      this._ref.markForCheck();\r\n    };\r\n    if (translations) {\r\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\r\n      if (isObservable(res.subscribe)) {\r\n        res.subscribe(onTranslation);\r\n      } else {\r\n        onTranslation(res);\r\n      }\r\n    }\r\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\r\n  }\r\n\r\n  transform(query: string, ...args: any[]): any {\r\n    if (!query || !query.length) {\r\n      return query;\r\n    }\r\n\r\n    // if we ask another time for the same key, return the last value\r\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\r\n      return this.value;\r\n    }\r\n\r\n    let interpolateParams: Object;\r\n    if (isDefined(args[0]) && args.length) {\r\n      if (typeof args[0] === 'string' && args[0].length) {\r\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\r\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\r\n        let validArgs: string = args[0]\r\n          .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\r\n          .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\r\n        try {\r\n          interpolateParams = JSON.parse(validArgs);\r\n        } catch (e) {\r\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\r\n        }\r\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\r\n        interpolateParams = args[0];\r\n      }\r\n    }\r\n\r\n    // store the query, in case it changes\r\n    this.lastKey = query;\r\n\r\n    // store the params, in case they change\r\n    this.lastParams = args;\r\n\r\n    // set the value\r\n    this.updateValue(query, interpolateParams);\r\n\r\n    // if there is a subscription to onLangChange, clean it\r\n    this._dispose();\r\n\r\n    // subscribe to onTranslationChange event, in case the translations change\r\n    if (!this.onTranslationChange) {\r\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\r\n        if (this.lastKey && event.lang === this.translate.currentLang) {\r\n          this.lastKey = null;\r\n          this.updateValue(query, interpolateParams, event.translations);\r\n        }\r\n      });\r\n    }\r\n\r\n    // subscribe to onLangChange event, in case the language changes\r\n    if (!this.onLangChange) {\r\n      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\r\n        if (this.lastKey) {\r\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n          this.updateValue(query, interpolateParams, event.translations);\r\n        }\r\n      });\r\n    }\r\n\r\n    // subscribe to onDefaultLangChange event, in case the default language changes\r\n    if (!this.onDefaultLangChange) {\r\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\r\n        if (this.lastKey) {\r\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n          this.updateValue(query, interpolateParams);\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Clean any existing subscription to change events\r\n   */\r\n  private _dispose(): void {\r\n    if (typeof this.onTranslationChange !== 'undefined') {\r\n      this.onTranslationChange.unsubscribe();\r\n      this.onTranslationChange = undefined;\r\n    }\r\n    if (typeof this.onLangChange !== 'undefined') {\r\n      this.onLangChange.unsubscribe();\r\n      this.onLangChange = undefined;\r\n    }\r\n    if (typeof this.onDefaultLangChange !== 'undefined') {\r\n      this.onDefaultLangChange.unsubscribe();\r\n      this.onDefaultLangChange = undefined;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._dispose();\r\n  }\r\n}\r\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\r\nimport {TranslateLoader, TranslateFakeLoader} from \"./lib/translate.loader\";\r\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./lib/missing-translation-handler\";\r\nimport {TranslateParser, TranslateDefaultParser} from \"./lib/translate.parser\";\r\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./lib/translate.compiler\";\r\nimport {TranslateDirective} from \"./lib/translate.directive\";\r\nimport {TranslatePipe} from \"./lib/translate.pipe\";\r\nimport {TranslateStore} from \"./lib/translate.store\";\r\nimport {USE_DEFAULT_LANG, DEFAULT_LANGUAGE, USE_STORE, TranslateService, USE_EXTEND} from \"./lib/translate.service\";\r\n\r\nexport * from \"./lib/translate.loader\";\r\nexport * from \"./lib/translate.service\";\r\nexport * from \"./lib/missing-translation-handler\";\r\nexport * from \"./lib/translate.parser\";\r\nexport * from \"./lib/translate.compiler\";\r\nexport * from \"./lib/translate.directive\";\r\nexport * from \"./lib/translate.pipe\";\r\nexport * from \"./lib/translate.store\";\r\n\r\nexport interface TranslateModuleConfig {\r\n  loader?: Provider;\r\n  compiler?: Provider;\r\n  parser?: Provider;\r\n  missingTranslationHandler?: Provider;\r\n  // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\r\n  isolate?: boolean;\r\n  // extends translations for a given language instead of ignoring them if present\r\n  extend?: boolean;\r\n  useDefaultLang?: boolean;\r\n  defaultLanguage?: string;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TranslatePipe,\r\n    TranslateDirective\r\n  ],\r\n  exports: [\r\n    TranslatePipe,\r\n    TranslateDirective\r\n  ]\r\n})\r\nexport class TranslateModule {\r\n  /**\r\n   * Use this method in your root module to provide the TranslateService\r\n   */\r\n  static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders<TranslateModule> {\r\n    return {\r\n      ngModule: TranslateModule,\r\n      providers: [\r\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\r\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\r\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\r\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\r\n        TranslateStore,\r\n        {provide: USE_STORE, useValue: config.isolate},\r\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\r\n        {provide: USE_EXTEND, useValue: config.extend},\r\n        {provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage},\r\n        TranslateService\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Use this method in your other (non root) modules to import the directive/pipe\r\n   */\r\n  static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders<TranslateModule> {\r\n    return {\r\n      ngModule: TranslateModule,\r\n      providers: [\r\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\r\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\r\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\r\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\r\n        {provide: USE_STORE, useValue: config.isolate},\r\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\r\n        {provide: USE_EXTEND, useValue: config.extend},\r\n        {provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage},\r\n        TranslateService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}